/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateComplianceJobRequest;
import com.konfigthis.client.model.CreateComplianceJobResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2ComplianceJobsIdResponse;
import com.konfigthis.client.model.Get2ComplianceJobsResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Problem;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ComplianceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComplianceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ComplianceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createJobCall(CreateComplianceJobRequest createComplianceJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComplianceJobRequest;

        // create path and map variables
        String localVarPath = "/2/compliance/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(CreateComplianceJobRequest createComplianceJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createComplianceJobRequest' is set
        if (createComplianceJobRequest == null) {
            throw new ApiException("Missing the required parameter 'createComplianceJobRequest' when calling createJob(Async)");
        }

        return createJobCall(createComplianceJobRequest, _callback);

    }


    private ApiResponse<CreateComplianceJobResponse> createJobWithHttpInfo(CreateComplianceJobRequest createComplianceJobRequest) throws ApiException {
        okhttp3.Call localVarCall = createJobValidateBeforeCall(createComplianceJobRequest, null);
        Type localVarReturnType = new TypeToken<CreateComplianceJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createJobAsync(CreateComplianceJobRequest createComplianceJobRequest, final ApiCallback<CreateComplianceJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobValidateBeforeCall(createComplianceJobRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateComplianceJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateJobRequestBuilder {
        private final String type;
        private String name;
        private Boolean resumable;

        private CreateJobRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set name
         * @param name User-provided name for a compliance job. (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set resumable
         * @param resumable If true, this endpoint will return a pre-signed URL with resumable uploads enabled. (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder resumable(Boolean resumable) {
            this.resumable = resumable;
            return this;
        }
        
        /**
         * Build call for createJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateComplianceJobRequest createComplianceJobRequest = buildBodyParams();
            return createJobCall(createComplianceJobRequest, _callback);
        }

        private CreateComplianceJobRequest buildBodyParams() {
            CreateComplianceJobRequest createComplianceJobRequest = new CreateComplianceJobRequest();
            createComplianceJobRequest.name(this.name);
            createComplianceJobRequest.resumable(this.resumable);
            if (this.type != null)
            createComplianceJobRequest.type(CreateComplianceJobRequest.TypeEnum.fromValue(this.type));
            return createComplianceJobRequest;
        }

        /**
         * Execute createJob request
         * @return CreateComplianceJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateComplianceJobResponse execute() throws ApiException {
            CreateComplianceJobRequest createComplianceJobRequest = buildBodyParams();
            ApiResponse<CreateComplianceJobResponse> localVarResp = createJobWithHttpInfo(createComplianceJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createJob request with HTTP info returned
         * @return ApiResponse&lt;CreateComplianceJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateComplianceJobResponse> executeWithHttpInfo() throws ApiException {
            CreateComplianceJobRequest createComplianceJobRequest = buildBodyParams();
            return createJobWithHttpInfo(createComplianceJobRequest);
        }

        /**
         * Execute createJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateComplianceJobResponse> _callback) throws ApiException {
            CreateComplianceJobRequest createComplianceJobRequest = buildBodyParams();
            return createJobAsync(createComplianceJobRequest, _callback);
        }
    }

    /**
     * Create compliance job
     * Creates a compliance for the given job type
     * @param createComplianceJobRequest  (required)
     * @return CreateJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs">Create compliance job Documentation</a>
     */
    public CreateJobRequestBuilder createJob(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateJobRequestBuilder(type);
    }
    private okhttp3.Call getJobByIdCall(String id, Set<String> complianceJobFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/compliance/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (complianceJobFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "compliance_job.fields", complianceJobFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobByIdValidateBeforeCall(String id, Set<String> complianceJobFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobById(Async)");
        }

        return getJobByIdCall(id, complianceJobFields, _callback);

    }


    private ApiResponse<Get2ComplianceJobsIdResponse> getJobByIdWithHttpInfo(String id, Set<String> complianceJobFields) throws ApiException {
        okhttp3.Call localVarCall = getJobByIdValidateBeforeCall(id, complianceJobFields, null);
        Type localVarReturnType = new TypeToken<Get2ComplianceJobsIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobByIdAsync(String id, Set<String> complianceJobFields, final ApiCallback<Get2ComplianceJobsIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobByIdValidateBeforeCall(id, complianceJobFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ComplianceJobsIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobByIdRequestBuilder {
        private final String id;
        private Set<String> complianceJobFields;

        private GetJobByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set complianceJobFields
         * @param complianceJobFields A comma separated list of ComplianceJob fields to display. (optional)
         * @return GetJobByIdRequestBuilder
         */
        public GetJobByIdRequestBuilder complianceJobFields(Set<String> complianceJobFields) {
            this.complianceJobFields = complianceJobFields;
            return this;
        }
        
        /**
         * Build call for getJobById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobByIdCall(id, complianceJobFields, _callback);
        }


        /**
         * Execute getJobById request
         * @return Get2ComplianceJobsIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ComplianceJobsIdResponse execute() throws ApiException {
            ApiResponse<Get2ComplianceJobsIdResponse> localVarResp = getJobByIdWithHttpInfo(id, complianceJobFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobById request with HTTP info returned
         * @return ApiResponse&lt;Get2ComplianceJobsIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ComplianceJobsIdResponse> executeWithHttpInfo() throws ApiException {
            return getJobByIdWithHttpInfo(id, complianceJobFields);
        }

        /**
         * Execute getJobById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ComplianceJobsIdResponse> _callback) throws ApiException {
            return getJobByIdAsync(id, complianceJobFields, _callback);
        }
    }

    /**
     * Get Compliance Job
     * Returns a single Compliance Job by ID
     * @param id The ID of the Compliance Job to retrieve. (required)
     * @return GetJobByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id">Get Compliance Job Documentation</a>
     */
    public GetJobByIdRequestBuilder getJobById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetJobByIdRequestBuilder(id);
    }
    private okhttp3.Call listJobsCall(String type, String status, Set<String> complianceJobFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/compliance/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (complianceJobFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "compliance_job.fields", complianceJobFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listJobsValidateBeforeCall(String type, String status, Set<String> complianceJobFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listJobs(Async)");
        }

        return listJobsCall(type, status, complianceJobFields, _callback);

    }


    private ApiResponse<Get2ComplianceJobsResponse> listJobsWithHttpInfo(String type, String status, Set<String> complianceJobFields) throws ApiException {
        okhttp3.Call localVarCall = listJobsValidateBeforeCall(type, status, complianceJobFields, null);
        Type localVarReturnType = new TypeToken<Get2ComplianceJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listJobsAsync(String type, String status, Set<String> complianceJobFields, final ApiCallback<Get2ComplianceJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listJobsValidateBeforeCall(type, status, complianceJobFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ComplianceJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListJobsRequestBuilder {
        private final String type;
        private String status;
        private Set<String> complianceJobFields;

        private ListJobsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set status
         * @param status Status of Compliance Job to list. (optional)
         * @return ListJobsRequestBuilder
         */
        public ListJobsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set complianceJobFields
         * @param complianceJobFields A comma separated list of ComplianceJob fields to display. (optional)
         * @return ListJobsRequestBuilder
         */
        public ListJobsRequestBuilder complianceJobFields(Set<String> complianceJobFields) {
            this.complianceJobFields = complianceJobFields;
            return this;
        }
        
        /**
         * Build call for listJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listJobsCall(type, status, complianceJobFields, _callback);
        }


        /**
         * Execute listJobs request
         * @return Get2ComplianceJobsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ComplianceJobsResponse execute() throws ApiException {
            ApiResponse<Get2ComplianceJobsResponse> localVarResp = listJobsWithHttpInfo(type, status, complianceJobFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listJobs request with HTTP info returned
         * @return ApiResponse&lt;Get2ComplianceJobsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ComplianceJobsResponse> executeWithHttpInfo() throws ApiException {
            return listJobsWithHttpInfo(type, status, complianceJobFields);
        }

        /**
         * Execute listJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ComplianceJobsResponse> _callback) throws ApiException {
            return listJobsAsync(type, status, complianceJobFields, _callback);
        }
    }

    /**
     * List Compliance Jobs
     * Returns recent Compliance Jobs for a given job type and optional job status
     * @param type Type of Compliance Job to list. (required)
     * @return ListJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs">List Compliance Jobs Documentation</a>
     */
    public ListJobsRequestBuilder listJobs(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new ListJobsRequestBuilder(type);
    }
    private okhttp3.Call streamDataCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/compliance/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamDataValidateBeforeCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partition' is set
        if (partition == null) {
            throw new ApiException("Missing the required parameter 'partition' when calling streamData(Async)");
        }

        return streamDataCall(partition, backfillMinutes, startTime, endTime, _callback);

    }


    private ApiResponse<Object> streamDataWithHttpInfo(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = streamDataValidateBeforeCall(partition, backfillMinutes, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call streamDataAsync(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamDataValidateBeforeCall(partition, backfillMinutes, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StreamDataRequestBuilder {
        private final Integer partition;
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;

        private StreamDataRequestBuilder(Integer partition) {
            this.partition = partition;
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return StreamDataRequestBuilder
         */
        public StreamDataRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided. (optional)
         * @return StreamDataRequestBuilder
         */
        public StreamDataRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided. (optional)
         * @return StreamDataRequestBuilder
         */
        public StreamDataRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Build call for streamData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamDataCall(partition, backfillMinutes, startTime, endTime, _callback);
        }


        /**
         * Execute streamData request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = streamDataWithHttpInfo(partition, backfillMinutes, startTime, endTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute streamData request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return streamDataWithHttpInfo(partition, backfillMinutes, startTime, endTime);
        }

        /**
         * Execute streamData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return streamDataAsync(partition, backfillMinutes, startTime, endTime, _callback);
        }
    }

    /**
     * Tweets Compliance stream
     * Streams 100% of compliance data for Tweets
     * @param partition The partition number. (required)
     * @return StreamDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamDataRequestBuilder streamData(Integer partition) throws IllegalArgumentException {
        if (partition == null) throw new IllegalArgumentException("\"partition\" is required but got null");
        return new StreamDataRequestBuilder(partition);
    }
    private okhttp3.Call streamTweetsLabelEventsCall(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/label/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamTweetsLabelEventsValidateBeforeCall(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        return streamTweetsLabelEventsCall(backfillMinutes, startTime, endTime, _callback);

    }


    private ApiResponse<Object> streamTweetsLabelEventsWithHttpInfo(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = streamTweetsLabelEventsValidateBeforeCall(backfillMinutes, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call streamTweetsLabelEventsAsync(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamTweetsLabelEventsValidateBeforeCall(backfillMinutes, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StreamTweetsLabelEventsRequestBuilder {
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;

        private StreamTweetsLabelEventsRequestBuilder() {
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return StreamTweetsLabelEventsRequestBuilder
         */
        public StreamTweetsLabelEventsRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided. (optional)
         * @return StreamTweetsLabelEventsRequestBuilder
         */
        public StreamTweetsLabelEventsRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided. (optional)
         * @return StreamTweetsLabelEventsRequestBuilder
         */
        public StreamTweetsLabelEventsRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Build call for streamTweetsLabelEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamTweetsLabelEventsCall(backfillMinutes, startTime, endTime, _callback);
        }


        /**
         * Execute streamTweetsLabelEvents request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = streamTweetsLabelEventsWithHttpInfo(backfillMinutes, startTime, endTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute streamTweetsLabelEvents request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return streamTweetsLabelEventsWithHttpInfo(backfillMinutes, startTime, endTime);
        }

        /**
         * Execute streamTweetsLabelEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return streamTweetsLabelEventsAsync(backfillMinutes, startTime, endTime, _callback);
        }
    }

    /**
     * Tweets Label stream
     * Streams 100% of labeling events applied to Tweets
     * @return StreamTweetsLabelEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamTweetsLabelEventsRequestBuilder streamTweetsLabelEvents() throws IllegalArgumentException {
        return new StreamTweetsLabelEventsRequestBuilder();
    }
    private okhttp3.Call streamUsersDataCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/compliance/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamUsersDataValidateBeforeCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partition' is set
        if (partition == null) {
            throw new ApiException("Missing the required parameter 'partition' when calling streamUsersData(Async)");
        }

        return streamUsersDataCall(partition, backfillMinutes, startTime, endTime, _callback);

    }


    private ApiResponse<Object> streamUsersDataWithHttpInfo(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = streamUsersDataValidateBeforeCall(partition, backfillMinutes, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call streamUsersDataAsync(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamUsersDataValidateBeforeCall(partition, backfillMinutes, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StreamUsersDataRequestBuilder {
        private final Integer partition;
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;

        private StreamUsersDataRequestBuilder(Integer partition) {
            this.partition = partition;
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return StreamUsersDataRequestBuilder
         */
        public StreamUsersDataRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)
         * @return StreamUsersDataRequestBuilder
         */
        public StreamUsersDataRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)
         * @return StreamUsersDataRequestBuilder
         */
        public StreamUsersDataRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Build call for streamUsersData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamUsersDataCall(partition, backfillMinutes, startTime, endTime, _callback);
        }


        /**
         * Execute streamUsersData request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = streamUsersDataWithHttpInfo(partition, backfillMinutes, startTime, endTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute streamUsersData request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return streamUsersDataWithHttpInfo(partition, backfillMinutes, startTime, endTime);
        }

        /**
         * Execute streamUsersData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return streamUsersDataAsync(partition, backfillMinutes, startTime, endTime, _callback);
        }
    }

    /**
     * Users Compliance stream
     * Streams 100% of compliance data for Users
     * @param partition The partition number. (required)
     * @return StreamUsersDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamUsersDataRequestBuilder streamUsersData(Integer partition) throws IllegalArgumentException {
        if (partition == null) throw new IllegalArgumentException("\"partition\" is required but got null");
        return new StreamUsersDataRequestBuilder(partition);
    }
}
