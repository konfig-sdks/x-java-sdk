/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2ListsIdResponse;
import com.konfigthis.client.model.Get2UsersIdFollowedListsResponse;
import com.konfigthis.client.model.Get2UsersIdListMembershipsResponse;
import com.konfigthis.client.model.Get2UsersIdOwnedListsResponse;
import com.konfigthis.client.model.Get2UsersIdPinnedListsResponse;
import com.konfigthis.client.model.ListAddUserRequest;
import com.konfigthis.client.model.ListCreateRequest;
import com.konfigthis.client.model.ListCreateResponse;
import com.konfigthis.client.model.ListDeleteResponse;
import com.konfigthis.client.model.ListFollowedRequest;
import com.konfigthis.client.model.ListFollowedResponse;
import com.konfigthis.client.model.ListMutateResponse;
import com.konfigthis.client.model.ListPinnedRequest;
import com.konfigthis.client.model.ListPinnedResponse;
import com.konfigthis.client.model.ListUnpinResponse;
import com.konfigthis.client.model.ListUpdateRequest;
import com.konfigthis.client.model.ListUpdateResponse;
import com.konfigthis.client.model.Problem;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ListsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMemberCall(String id, ListAddUserRequest listAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAddUserRequest;

        // create path and map variables
        String localVarPath = "/2/lists/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberValidateBeforeCall(String id, ListAddUserRequest listAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addMember(Async)");
        }

        return addMemberCall(id, listAddUserRequest, _callback);

    }


    private ApiResponse<ListMutateResponse> addMemberWithHttpInfo(String id, ListAddUserRequest listAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = addMemberValidateBeforeCall(id, listAddUserRequest, null);
        Type localVarReturnType = new TypeToken<ListMutateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMemberAsync(String id, ListAddUserRequest listAddUserRequest, final ApiCallback<ListMutateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberValidateBeforeCall(id, listAddUserRequest, _callback);
        Type localVarReturnType = new TypeToken<ListMutateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMemberRequestBuilder {
        private final String userId;
        private final String id;

        private AddMemberRequestBuilder(String userId, String id) {
            this.userId = userId;
            this.id = id;
        }

        /**
         * Build call for addMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListAddUserRequest listAddUserRequest = buildBodyParams();
            return addMemberCall(id, listAddUserRequest, _callback);
        }

        private ListAddUserRequest buildBodyParams() {
            ListAddUserRequest listAddUserRequest = new ListAddUserRequest();
            listAddUserRequest.userId(this.userId);
            return listAddUserRequest;
        }

        /**
         * Execute addMember request
         * @return ListMutateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListMutateResponse execute() throws ApiException {
            ListAddUserRequest listAddUserRequest = buildBodyParams();
            ApiResponse<ListMutateResponse> localVarResp = addMemberWithHttpInfo(id, listAddUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMember request with HTTP info returned
         * @return ApiResponse&lt;ListMutateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMutateResponse> executeWithHttpInfo() throws ApiException {
            ListAddUserRequest listAddUserRequest = buildBodyParams();
            return addMemberWithHttpInfo(id, listAddUserRequest);
        }

        /**
         * Execute addMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMutateResponse> _callback) throws ApiException {
            ListAddUserRequest listAddUserRequest = buildBodyParams();
            return addMemberAsync(id, listAddUserRequest, _callback);
        }
    }

    /**
     * Add a List member
     * Causes a User to become a member of a List.
     * @param id The ID of the List for which to add a member. (required)
     * @return AddMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/post-lists-id-members">Add a List member Documentation</a>
     */
    public AddMemberRequestBuilder addMember(String userId, String id) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddMemberRequestBuilder(userId, id);
    }
    private okhttp3.Call createNewListCall(ListCreateRequest listCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listCreateRequest;

        // create path and map variables
        String localVarPath = "/2/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewListValidateBeforeCall(ListCreateRequest listCreateRequest, final ApiCallback _callback) throws ApiException {
        return createNewListCall(listCreateRequest, _callback);

    }


    private ApiResponse<ListCreateResponse> createNewListWithHttpInfo(ListCreateRequest listCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewListValidateBeforeCall(listCreateRequest, null);
        Type localVarReturnType = new TypeToken<ListCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewListAsync(ListCreateRequest listCreateRequest, final ApiCallback<ListCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewListValidateBeforeCall(listCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ListCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewListRequestBuilder {
        private final String name;
        private String description;
        private Boolean _private;

        private CreateNewListRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set _private
         * @param _private  (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder _private(Boolean _private) {
            this._private = _private;
            return this;
        }
        
        /**
         * Build call for createNewList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListCreateRequest listCreateRequest = buildBodyParams();
            return createNewListCall(listCreateRequest, _callback);
        }

        private ListCreateRequest buildBodyParams() {
            ListCreateRequest listCreateRequest = new ListCreateRequest();
            listCreateRequest.description(this.description);
            listCreateRequest.name(this.name);
            listCreateRequest._private(this._private);
            return listCreateRequest;
        }

        /**
         * Execute createNewList request
         * @return ListCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListCreateResponse execute() throws ApiException {
            ListCreateRequest listCreateRequest = buildBodyParams();
            ApiResponse<ListCreateResponse> localVarResp = createNewListWithHttpInfo(listCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewList request with HTTP info returned
         * @return ApiResponse&lt;ListCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListCreateResponse> executeWithHttpInfo() throws ApiException {
            ListCreateRequest listCreateRequest = buildBodyParams();
            return createNewListWithHttpInfo(listCreateRequest);
        }

        /**
         * Execute createNewList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListCreateResponse> _callback) throws ApiException {
            ListCreateRequest listCreateRequest = buildBodyParams();
            return createNewListAsync(listCreateRequest, _callback);
        }
    }

    /**
     * Create List
     * Creates a new List.
     * @return CreateNewListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists">Create List Documentation</a>
     */
    public CreateNewListRequestBuilder createNewList(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        return new CreateNewListRequestBuilder(name);
    }
    private okhttp3.Call deleteOwnedListCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOwnedListValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOwnedList(Async)");
        }

        return deleteOwnedListCall(id, _callback);

    }


    private ApiResponse<ListDeleteResponse> deleteOwnedListWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOwnedListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ListDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOwnedListAsync(String id, final ApiCallback<ListDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOwnedListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ListDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOwnedListRequestBuilder {
        private final String id;

        private DeleteOwnedListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOwnedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOwnedListCall(id, _callback);
        }


        /**
         * Execute deleteOwnedList request
         * @return ListDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListDeleteResponse execute() throws ApiException {
            ApiResponse<ListDeleteResponse> localVarResp = deleteOwnedListWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOwnedList request with HTTP info returned
         * @return ApiResponse&lt;ListDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListDeleteResponse> executeWithHttpInfo() throws ApiException {
            return deleteOwnedListWithHttpInfo(id);
        }

        /**
         * Execute deleteOwnedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListDeleteResponse> _callback) throws ApiException {
            return deleteOwnedListAsync(id, _callback);
        }
    }

    /**
     * Delete List
     * Delete a List that you own.
     * @param id The ID of the List to delete. (required)
     * @return DeleteOwnedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id">Delete List Documentation</a>
     */
    public DeleteOwnedListRequestBuilder deleteOwnedList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOwnedListRequestBuilder(id);
    }
    private okhttp3.Call followListCall(String id, ListFollowedRequest listFollowedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listFollowedRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/followed_lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followListValidateBeforeCall(String id, ListFollowedRequest listFollowedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling followList(Async)");
        }

        return followListCall(id, listFollowedRequest, _callback);

    }


    private ApiResponse<ListFollowedResponse> followListWithHttpInfo(String id, ListFollowedRequest listFollowedRequest) throws ApiException {
        okhttp3.Call localVarCall = followListValidateBeforeCall(id, listFollowedRequest, null);
        Type localVarReturnType = new TypeToken<ListFollowedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call followListAsync(String id, ListFollowedRequest listFollowedRequest, final ApiCallback<ListFollowedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = followListValidateBeforeCall(id, listFollowedRequest, _callback);
        Type localVarReturnType = new TypeToken<ListFollowedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FollowListRequestBuilder {
        private final String listId;
        private final String id;

        private FollowListRequestBuilder(String listId, String id) {
            this.listId = listId;
            this.id = id;
        }

        /**
         * Build call for followList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListFollowedRequest listFollowedRequest = buildBodyParams();
            return followListCall(id, listFollowedRequest, _callback);
        }

        private ListFollowedRequest buildBodyParams() {
            ListFollowedRequest listFollowedRequest = new ListFollowedRequest();
            listFollowedRequest.listId(this.listId);
            return listFollowedRequest;
        }

        /**
         * Execute followList request
         * @return ListFollowedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListFollowedResponse execute() throws ApiException {
            ListFollowedRequest listFollowedRequest = buildBodyParams();
            ApiResponse<ListFollowedResponse> localVarResp = followListWithHttpInfo(id, listFollowedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute followList request with HTTP info returned
         * @return ApiResponse&lt;ListFollowedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListFollowedResponse> executeWithHttpInfo() throws ApiException {
            ListFollowedRequest listFollowedRequest = buildBodyParams();
            return followListWithHttpInfo(id, listFollowedRequest);
        }

        /**
         * Execute followList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListFollowedResponse> _callback) throws ApiException {
            ListFollowedRequest listFollowedRequest = buildBodyParams();
            return followListAsync(id, listFollowedRequest, _callback);
        }
    }

    /**
     * Follow a List
     * Causes a User to follow a List.
     * @param id The ID of the authenticated source User that will follow the List. (required)
     * @return FollowListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/post-users-id-followed-lists">Follow a List Documentation</a>
     */
    public FollowListRequestBuilder followList(String listId, String id) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new FollowListRequestBuilder(listId, id);
    }
    private okhttp3.Call getFollowedCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/followed_lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (listFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "list.fields", listFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFollowed(Async)");
        }

        return getFollowedCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);

    }


    private ApiResponse<Get2UsersIdFollowedListsResponse> getFollowedWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields) throws ApiException {
        okhttp3.Call localVarCall = getFollowedValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowedListsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedAsync(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback<Get2UsersIdFollowedListsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowedListsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> listFields;
        private Set<String> expansions;
        private Set<String> userFields;

        private GetFollowedRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetFollowedRequestBuilder
         */
        public GetFollowedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetFollowedRequestBuilder
         */
        public GetFollowedRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields A comma separated list of List fields to display. (optional)
         * @return GetFollowedRequestBuilder
         */
        public GetFollowedRequestBuilder listFields(Set<String> listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFollowedRequestBuilder
         */
        public GetFollowedRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFollowedRequestBuilder
         */
        public GetFollowedRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Build call for getFollowed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }


        /**
         * Execute getFollowed request
         * @return Get2UsersIdFollowedListsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdFollowedListsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdFollowedListsResponse> localVarResp = getFollowedWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowed request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdFollowedListsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdFollowedListsResponse> executeWithHttpInfo() throws ApiException {
            return getFollowedWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
        }

        /**
         * Execute getFollowed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdFollowedListsResponse> _callback) throws ApiException {
            return getFollowedAsync(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }
    }

    /**
     * Get User&#39;s Followed Lists
     * Returns a User&#39;s followed Lists.
     * @param id The ID of the User to lookup. (required)
     * @return GetFollowedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists">Get User&#39;s Followed Lists Documentation</a>
     */
    public GetFollowedRequestBuilder getFollowed(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFollowedRequestBuilder(id);
    }
    private okhttp3.Call getUserMembershipsCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/list_memberships"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (listFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "list.fields", listFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserMembershipsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserMemberships(Async)");
        }

        return getUserMembershipsCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);

    }


    private ApiResponse<Get2UsersIdListMembershipsResponse> getUserMembershipsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields) throws ApiException {
        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdListMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserMembershipsAsync(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback<Get2UsersIdListMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdListMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserMembershipsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> listFields;
        private Set<String> expansions;
        private Set<String> userFields;

        private GetUserMembershipsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields A comma separated list of List fields to display. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder listFields(Set<String> listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Build call for getUserMemberships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserMembershipsCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }


        /**
         * Execute getUserMemberships request
         * @return Get2UsersIdListMembershipsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdListMembershipsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdListMembershipsResponse> localVarResp = getUserMembershipsWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserMemberships request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdListMembershipsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdListMembershipsResponse> executeWithHttpInfo() throws ApiException {
            return getUserMembershipsWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
        }

        /**
         * Execute getUserMemberships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdListMembershipsResponse> _callback) throws ApiException {
            return getUserMembershipsAsync(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }
    }

    /**
     * Get a User&#39;s List Memberships
     * Get a User&#39;s List Memberships.
     * @param id The ID of the User to lookup. (required)
     * @return GetUserMembershipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships">Get a User&#39;s List Memberships Documentation</a>
     */
    public GetUserMembershipsRequestBuilder getUserMemberships(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserMembershipsRequestBuilder(id);
    }
    private okhttp3.Call getUserOwnedListsCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/owned_lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (listFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "list.fields", listFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserOwnedListsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserOwnedLists(Async)");
        }

        return getUserOwnedListsCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);

    }


    private ApiResponse<Get2UsersIdOwnedListsResponse> getUserOwnedListsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields) throws ApiException {
        okhttp3.Call localVarCall = getUserOwnedListsValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdOwnedListsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserOwnedListsAsync(String id, Integer maxResults, String paginationToken, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback<Get2UsersIdOwnedListsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserOwnedListsValidateBeforeCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdOwnedListsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserOwnedListsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> listFields;
        private Set<String> expansions;
        private Set<String> userFields;

        private GetUserOwnedListsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetUserOwnedListsRequestBuilder
         */
        public GetUserOwnedListsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetUserOwnedListsRequestBuilder
         */
        public GetUserOwnedListsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields A comma separated list of List fields to display. (optional)
         * @return GetUserOwnedListsRequestBuilder
         */
        public GetUserOwnedListsRequestBuilder listFields(Set<String> listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetUserOwnedListsRequestBuilder
         */
        public GetUserOwnedListsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetUserOwnedListsRequestBuilder
         */
        public GetUserOwnedListsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Build call for getUserOwnedLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserOwnedListsCall(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }


        /**
         * Execute getUserOwnedLists request
         * @return Get2UsersIdOwnedListsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdOwnedListsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdOwnedListsResponse> localVarResp = getUserOwnedListsWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserOwnedLists request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdOwnedListsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdOwnedListsResponse> executeWithHttpInfo() throws ApiException {
            return getUserOwnedListsWithHttpInfo(id, maxResults, paginationToken, listFields, expansions, userFields);
        }

        /**
         * Execute getUserOwnedLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdOwnedListsResponse> _callback) throws ApiException {
            return getUserOwnedListsAsync(id, maxResults, paginationToken, listFields, expansions, userFields, _callback);
        }
    }

    /**
     * Get a User&#39;s Owned Lists.
     * Get a User&#39;s Owned Lists.
     * @param id The ID of the User to lookup. (required)
     * @return GetUserOwnedListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists">Get a User&#39;s Owned Lists. Documentation</a>
     */
    public GetUserOwnedListsRequestBuilder getUserOwnedLists(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserOwnedListsRequestBuilder(id);
    }
    private okhttp3.Call getUserPinnedListsCall(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/pinned_lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "list.fields", listFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPinnedListsValidateBeforeCall(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserPinnedLists(Async)");
        }

        return getUserPinnedListsCall(id, listFields, expansions, userFields, _callback);

    }


    private ApiResponse<Get2UsersIdPinnedListsResponse> getUserPinnedListsWithHttpInfo(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields) throws ApiException {
        okhttp3.Call localVarCall = getUserPinnedListsValidateBeforeCall(id, listFields, expansions, userFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdPinnedListsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPinnedListsAsync(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback<Get2UsersIdPinnedListsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPinnedListsValidateBeforeCall(id, listFields, expansions, userFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdPinnedListsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPinnedListsRequestBuilder {
        private final String id;
        private Set<String> listFields;
        private Set<String> expansions;
        private Set<String> userFields;

        private GetUserPinnedListsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set listFields
         * @param listFields A comma separated list of List fields to display. (optional)
         * @return GetUserPinnedListsRequestBuilder
         */
        public GetUserPinnedListsRequestBuilder listFields(Set<String> listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetUserPinnedListsRequestBuilder
         */
        public GetUserPinnedListsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetUserPinnedListsRequestBuilder
         */
        public GetUserPinnedListsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Build call for getUserPinnedLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPinnedListsCall(id, listFields, expansions, userFields, _callback);
        }


        /**
         * Execute getUserPinnedLists request
         * @return Get2UsersIdPinnedListsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdPinnedListsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdPinnedListsResponse> localVarResp = getUserPinnedListsWithHttpInfo(id, listFields, expansions, userFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPinnedLists request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdPinnedListsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdPinnedListsResponse> executeWithHttpInfo() throws ApiException {
            return getUserPinnedListsWithHttpInfo(id, listFields, expansions, userFields);
        }

        /**
         * Execute getUserPinnedLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdPinnedListsResponse> _callback) throws ApiException {
            return getUserPinnedListsAsync(id, listFields, expansions, userFields, _callback);
        }
    }

    /**
     * Get a User&#39;s Pinned Lists
     * Get a User&#39;s Pinned Lists.
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @return GetUserPinnedListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/pinned-lists/api-reference/get-users-id-pinned_lists">Get a User&#39;s Pinned Lists Documentation</a>
     */
    public GetUserPinnedListsRequestBuilder getUserPinnedLists(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserPinnedListsRequestBuilder(id);
    }
    private okhttp3.Call lookupByListIdCall(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "list.fields", listFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByListIdValidateBeforeCall(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lookupByListId(Async)");
        }

        return lookupByListIdCall(id, listFields, expansions, userFields, _callback);

    }


    private ApiResponse<Get2ListsIdResponse> lookupByListIdWithHttpInfo(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByListIdValidateBeforeCall(id, listFields, expansions, userFields, null);
        Type localVarReturnType = new TypeToken<Get2ListsIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByListIdAsync(String id, Set<String> listFields, Set<String> expansions, Set<String> userFields, final ApiCallback<Get2ListsIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByListIdValidateBeforeCall(id, listFields, expansions, userFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ListsIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByListIdRequestBuilder {
        private final String id;
        private Set<String> listFields;
        private Set<String> expansions;
        private Set<String> userFields;

        private LookupByListIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set listFields
         * @param listFields A comma separated list of List fields to display. (optional)
         * @return LookupByListIdRequestBuilder
         */
        public LookupByListIdRequestBuilder listFields(Set<String> listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByListIdRequestBuilder
         */
        public LookupByListIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByListIdRequestBuilder
         */
        public LookupByListIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Build call for lookupByListId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByListIdCall(id, listFields, expansions, userFields, _callback);
        }


        /**
         * Execute lookupByListId request
         * @return Get2ListsIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ListsIdResponse execute() throws ApiException {
            ApiResponse<Get2ListsIdResponse> localVarResp = lookupByListIdWithHttpInfo(id, listFields, expansions, userFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByListId request with HTTP info returned
         * @return ApiResponse&lt;Get2ListsIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ListsIdResponse> executeWithHttpInfo() throws ApiException {
            return lookupByListIdWithHttpInfo(id, listFields, expansions, userFields);
        }

        /**
         * Execute lookupByListId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ListsIdResponse> _callback) throws ApiException {
            return lookupByListIdAsync(id, listFields, expansions, userFields, _callback);
        }
    }

    /**
     * List lookup by List ID.
     * Returns a List.
     * @param id The ID of the List. (required)
     * @return LookupByListIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id">List lookup by List ID. Documentation</a>
     */
    public LookupByListIdRequestBuilder lookupByListId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LookupByListIdRequestBuilder(id);
    }
    private okhttp3.Call pinListCall(String id, ListPinnedRequest listPinnedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPinnedRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/pinned_lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinListValidateBeforeCall(String id, ListPinnedRequest listPinnedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pinList(Async)");
        }

        // verify the required parameter 'listPinnedRequest' is set
        if (listPinnedRequest == null) {
            throw new ApiException("Missing the required parameter 'listPinnedRequest' when calling pinList(Async)");
        }

        return pinListCall(id, listPinnedRequest, _callback);

    }


    private ApiResponse<ListPinnedResponse> pinListWithHttpInfo(String id, ListPinnedRequest listPinnedRequest) throws ApiException {
        okhttp3.Call localVarCall = pinListValidateBeforeCall(id, listPinnedRequest, null);
        Type localVarReturnType = new TypeToken<ListPinnedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pinListAsync(String id, ListPinnedRequest listPinnedRequest, final ApiCallback<ListPinnedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinListValidateBeforeCall(id, listPinnedRequest, _callback);
        Type localVarReturnType = new TypeToken<ListPinnedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PinListRequestBuilder {
        private final String listId;
        private final String id;

        private PinListRequestBuilder(String listId, String id) {
            this.listId = listId;
            this.id = id;
        }

        /**
         * Build call for pinList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListPinnedRequest listPinnedRequest = buildBodyParams();
            return pinListCall(id, listPinnedRequest, _callback);
        }

        private ListPinnedRequest buildBodyParams() {
            ListPinnedRequest listPinnedRequest = new ListPinnedRequest();
            listPinnedRequest.listId(this.listId);
            return listPinnedRequest;
        }

        /**
         * Execute pinList request
         * @return ListPinnedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListPinnedResponse execute() throws ApiException {
            ListPinnedRequest listPinnedRequest = buildBodyParams();
            ApiResponse<ListPinnedResponse> localVarResp = pinListWithHttpInfo(id, listPinnedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pinList request with HTTP info returned
         * @return ApiResponse&lt;ListPinnedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListPinnedResponse> executeWithHttpInfo() throws ApiException {
            ListPinnedRequest listPinnedRequest = buildBodyParams();
            return pinListWithHttpInfo(id, listPinnedRequest);
        }

        /**
         * Execute pinList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListPinnedResponse> _callback) throws ApiException {
            ListPinnedRequest listPinnedRequest = buildBodyParams();
            return pinListAsync(id, listPinnedRequest, _callback);
        }
    }

    /**
     * Pin a List
     * Causes a User to pin a List.
     * @param id The ID of the authenticated source User that will pin the List. (required)
     * @param listPinnedRequest  (required)
     * @return PinListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/pinned-lists/api-reference/post-users-id-pinned-lists">Pin a List Documentation</a>
     */
    public PinListRequestBuilder pinList(String listId, String id) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new PinListRequestBuilder(listId, id);
    }
    private okhttp3.Call removeMemberCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberValidateBeforeCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeMember(Async)");
        }

        return removeMemberCall(id, userId, _callback);

    }


    private ApiResponse<ListMutateResponse> removeMemberWithHttpInfo(String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(id, userId, null);
        Type localVarReturnType = new TypeToken<ListMutateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMemberAsync(String id, String userId, final ApiCallback<ListMutateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(id, userId, _callback);
        Type localVarReturnType = new TypeToken<ListMutateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMemberRequestBuilder {
        private final String id;
        private final String userId;

        private RemoveMemberRequestBuilder(String id, String userId) {
            this.id = id;
            this.userId = userId;
        }

        /**
         * Build call for removeMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberCall(id, userId, _callback);
        }


        /**
         * Execute removeMember request
         * @return ListMutateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListMutateResponse execute() throws ApiException {
            ApiResponse<ListMutateResponse> localVarResp = removeMemberWithHttpInfo(id, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMember request with HTTP info returned
         * @return ApiResponse&lt;ListMutateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMutateResponse> executeWithHttpInfo() throws ApiException {
            return removeMemberWithHttpInfo(id, userId);
        }

        /**
         * Execute removeMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMutateResponse> _callback) throws ApiException {
            return removeMemberAsync(id, userId, _callback);
        }
    }

    /**
     * Remove a List member
     * Causes a User to be removed from the members of a List.
     * @param id The ID of the List to remove a member. (required)
     * @param userId The ID of User that will be removed from the List. (required)
     * @return RemoveMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/delete-lists-id-members-user_id">Remove a List member Documentation</a>
     */
    public RemoveMemberRequestBuilder removeMember(String id, String userId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveMemberRequestBuilder(id, userId);
    }
    private okhttp3.Call unfollowListCall(String id, String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/followed_lists/{list_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowListValidateBeforeCall(String id, String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unfollowList(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling unfollowList(Async)");
        }

        return unfollowListCall(id, listId, _callback);

    }


    private ApiResponse<ListFollowedResponse> unfollowListWithHttpInfo(String id, String listId) throws ApiException {
        okhttp3.Call localVarCall = unfollowListValidateBeforeCall(id, listId, null);
        Type localVarReturnType = new TypeToken<ListFollowedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unfollowListAsync(String id, String listId, final ApiCallback<ListFollowedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowListValidateBeforeCall(id, listId, _callback);
        Type localVarReturnType = new TypeToken<ListFollowedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnfollowListRequestBuilder {
        private final String id;
        private final String listId;

        private UnfollowListRequestBuilder(String id, String listId) {
            this.id = id;
            this.listId = listId;
        }

        /**
         * Build call for unfollowList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unfollowListCall(id, listId, _callback);
        }


        /**
         * Execute unfollowList request
         * @return ListFollowedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListFollowedResponse execute() throws ApiException {
            ApiResponse<ListFollowedResponse> localVarResp = unfollowListWithHttpInfo(id, listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unfollowList request with HTTP info returned
         * @return ApiResponse&lt;ListFollowedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListFollowedResponse> executeWithHttpInfo() throws ApiException {
            return unfollowListWithHttpInfo(id, listId);
        }

        /**
         * Execute unfollowList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListFollowedResponse> _callback) throws ApiException {
            return unfollowListAsync(id, listId, _callback);
        }
    }

    /**
     * Unfollow a List
     * Causes a User to unfollow a List.
     * @param id The ID of the authenticated source User that will unfollow the List. (required)
     * @param listId The ID of the List to unfollow. (required)
     * @return UnfollowListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/delete-users-id-followed-lists-list_id">Unfollow a List Documentation</a>
     */
    public UnfollowListRequestBuilder unfollowList(String id, String listId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new UnfollowListRequestBuilder(id, listId);
    }
    private okhttp3.Call unpinListCall(String id, String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/pinned_lists/{list_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinListValidateBeforeCall(String id, String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unpinList(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling unpinList(Async)");
        }

        return unpinListCall(id, listId, _callback);

    }


    private ApiResponse<ListUnpinResponse> unpinListWithHttpInfo(String id, String listId) throws ApiException {
        okhttp3.Call localVarCall = unpinListValidateBeforeCall(id, listId, null);
        Type localVarReturnType = new TypeToken<ListUnpinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unpinListAsync(String id, String listId, final ApiCallback<ListUnpinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinListValidateBeforeCall(id, listId, _callback);
        Type localVarReturnType = new TypeToken<ListUnpinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnpinListRequestBuilder {
        private final String id;
        private final String listId;

        private UnpinListRequestBuilder(String id, String listId) {
            this.id = id;
            this.listId = listId;
        }

        /**
         * Build call for unpinList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpinListCall(id, listId, _callback);
        }


        /**
         * Execute unpinList request
         * @return ListUnpinResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListUnpinResponse execute() throws ApiException {
            ApiResponse<ListUnpinResponse> localVarResp = unpinListWithHttpInfo(id, listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unpinList request with HTTP info returned
         * @return ApiResponse&lt;ListUnpinResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListUnpinResponse> executeWithHttpInfo() throws ApiException {
            return unpinListWithHttpInfo(id, listId);
        }

        /**
         * Execute unpinList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListUnpinResponse> _callback) throws ApiException {
            return unpinListAsync(id, listId, _callback);
        }
    }

    /**
     * Unpin a List
     * Causes a User to remove a pinned List.
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @param listId The ID of the List to unpin. (required)
     * @return UnpinListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/pinned-lists/api-reference/delete-users-id-pinned-lists-list_id">Unpin a List Documentation</a>
     */
    public UnpinListRequestBuilder unpinList(String id, String listId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new UnpinListRequestBuilder(id, listId);
    }
    private okhttp3.Call updateOwnedListCall(String id, ListUpdateRequest listUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUpdateRequest;

        // create path and map variables
        String localVarPath = "/2/lists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOwnedListValidateBeforeCall(String id, ListUpdateRequest listUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOwnedList(Async)");
        }

        return updateOwnedListCall(id, listUpdateRequest, _callback);

    }


    private ApiResponse<ListUpdateResponse> updateOwnedListWithHttpInfo(String id, ListUpdateRequest listUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOwnedListValidateBeforeCall(id, listUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ListUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOwnedListAsync(String id, ListUpdateRequest listUpdateRequest, final ApiCallback<ListUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOwnedListValidateBeforeCall(id, listUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ListUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOwnedListRequestBuilder {
        private final String id;
        private String description;
        private String name;
        private Boolean _private;

        private UpdateOwnedListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateOwnedListRequestBuilder
         */
        public UpdateOwnedListRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateOwnedListRequestBuilder
         */
        public UpdateOwnedListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set _private
         * @param _private  (optional)
         * @return UpdateOwnedListRequestBuilder
         */
        public UpdateOwnedListRequestBuilder _private(Boolean _private) {
            this._private = _private;
            return this;
        }
        
        /**
         * Build call for updateOwnedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListUpdateRequest listUpdateRequest = buildBodyParams();
            return updateOwnedListCall(id, listUpdateRequest, _callback);
        }

        private ListUpdateRequest buildBodyParams() {
            ListUpdateRequest listUpdateRequest = new ListUpdateRequest();
            listUpdateRequest.description(this.description);
            listUpdateRequest.name(this.name);
            listUpdateRequest._private(this._private);
            return listUpdateRequest;
        }

        /**
         * Execute updateOwnedList request
         * @return ListUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ListUpdateResponse execute() throws ApiException {
            ListUpdateRequest listUpdateRequest = buildBodyParams();
            ApiResponse<ListUpdateResponse> localVarResp = updateOwnedListWithHttpInfo(id, listUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOwnedList request with HTTP info returned
         * @return ApiResponse&lt;ListUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListUpdateResponse> executeWithHttpInfo() throws ApiException {
            ListUpdateRequest listUpdateRequest = buildBodyParams();
            return updateOwnedListWithHttpInfo(id, listUpdateRequest);
        }

        /**
         * Execute updateOwnedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListUpdateResponse> _callback) throws ApiException {
            ListUpdateRequest listUpdateRequest = buildBodyParams();
            return updateOwnedListAsync(id, listUpdateRequest, _callback);
        }
    }

    /**
     * Update List.
     * Update a List that you own.
     * @param id The ID of the List to modify. (required)
     * @return UpdateOwnedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id">Update List. Documentation</a>
     */
    public UpdateOwnedListRequestBuilder updateOwnedList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOwnedListRequestBuilder(id);
    }
}
