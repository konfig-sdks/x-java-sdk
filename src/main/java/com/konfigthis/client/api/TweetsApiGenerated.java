/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddOrDeleteRulesResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.FilteredStreamingTweetResponse;
import com.konfigthis.client.model.Get2ListsIdTweetsResponse;
import com.konfigthis.client.model.Get2SpacesIdBuyersResponse;
import com.konfigthis.client.model.Get2SpacesIdTweetsResponse;
import com.konfigthis.client.model.Get2TweetsCountsAllResponse;
import com.konfigthis.client.model.Get2TweetsCountsRecentResponse;
import com.konfigthis.client.model.Get2TweetsIdQuoteTweetsResponse;
import com.konfigthis.client.model.Get2TweetsIdResponse;
import com.konfigthis.client.model.Get2TweetsResponse;
import com.konfigthis.client.model.Get2TweetsSample10StreamResponse;
import com.konfigthis.client.model.Get2TweetsSearchAllResponse;
import com.konfigthis.client.model.Get2TweetsSearchRecentResponse;
import com.konfigthis.client.model.Get2UsersIdLikedTweetsResponse;
import com.konfigthis.client.model.Get2UsersIdMentionsResponse;
import com.konfigthis.client.model.Get2UsersIdTimelinesReverseChronologicalResponse;
import com.konfigthis.client.model.Get2UsersIdTweetsResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Problem;
import com.konfigthis.client.model.RulesLookupResponse;
import java.util.Set;
import com.konfigthis.client.model.StreamingTweetResponse;
import com.konfigthis.client.model.TweetCreateRequest;
import com.konfigthis.client.model.TweetCreateRequestGeo;
import com.konfigthis.client.model.TweetCreateRequestMedia;
import com.konfigthis.client.model.TweetCreateRequestPoll;
import com.konfigthis.client.model.TweetCreateRequestReply;
import com.konfigthis.client.model.TweetCreateResponse;
import com.konfigthis.client.model.TweetDeleteResponse;
import com.konfigthis.client.model.TweetHideRequest;
import com.konfigthis.client.model.TweetHideResponse;
import com.konfigthis.client.model.UsersLikesCreateRequest;
import com.konfigthis.client.model.UsersLikesCreateResponse;
import com.konfigthis.client.model.UsersLikesDeleteResponse;
import com.konfigthis.client.model.UsersRetweetsCreateRequest;
import com.konfigthis.client.model.UsersRetweetsCreateResponse;
import com.konfigthis.client.model.UsersRetweetsDeleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TweetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TweetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TweetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrDeleteRulesCall(Object body, Boolean dryRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/2/tweets/search/stream/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dryRun != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dry_run", dryRun));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrDeleteRulesValidateBeforeCall(Object body, Boolean dryRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrDeleteRules(Async)");
        }

        return addOrDeleteRulesCall(body, dryRun, _callback);

    }


    private ApiResponse<AddOrDeleteRulesResponse> addOrDeleteRulesWithHttpInfo(Object body, Boolean dryRun) throws ApiException {
        okhttp3.Call localVarCall = addOrDeleteRulesValidateBeforeCall(body, dryRun, null);
        Type localVarReturnType = new TypeToken<AddOrDeleteRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrDeleteRulesAsync(Object body, Boolean dryRun, final ApiCallback<AddOrDeleteRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrDeleteRulesValidateBeforeCall(body, dryRun, _callback);
        Type localVarReturnType = new TypeToken<AddOrDeleteRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrDeleteRulesRequestBuilder {
        private Boolean dryRun;
        private Object body;

        private AddOrDeleteRulesRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return AddOrDeleteRulesRequestBuilder
         */
        public AddOrDeleteRulesRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set dryRun
         * @param dryRun Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
         * @return AddOrDeleteRulesRequestBuilder
         */
        public AddOrDeleteRulesRequestBuilder dryRun(Boolean dryRun) {
            this.dryRun = dryRun;
            return this;
        }
        
        /**
         * Build call for addOrDeleteRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return addOrDeleteRulesCall(body, dryRun, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute addOrDeleteRules request
         * @return AddOrDeleteRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public AddOrDeleteRulesResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<AddOrDeleteRulesResponse> localVarResp = addOrDeleteRulesWithHttpInfo(body, dryRun);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrDeleteRules request with HTTP info returned
         * @return ApiResponse&lt;AddOrDeleteRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddOrDeleteRulesResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return addOrDeleteRulesWithHttpInfo(body, dryRun);
        }

        /**
         * Execute addOrDeleteRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddOrDeleteRulesResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return addOrDeleteRulesAsync(body, dryRun, _callback);
        }
    }

    /**
     * Add/Delete rules
     * Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     * @param body  (required)
     * @return AddOrDeleteRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules">Add/Delete rules Documentation</a>
     */
    public AddOrDeleteRulesRequestBuilder addOrDeleteRules() throws IllegalArgumentException {
        return new AddOrDeleteRulesRequestBuilder();
    }
    private okhttp3.Call createTweetCall(TweetCreateRequest tweetCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tweetCreateRequest;

        // create path and map variables
        String localVarPath = "/2/tweets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTweetValidateBeforeCall(TweetCreateRequest tweetCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tweetCreateRequest' is set
        if (tweetCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'tweetCreateRequest' when calling createTweet(Async)");
        }

        return createTweetCall(tweetCreateRequest, _callback);

    }


    private ApiResponse<TweetCreateResponse> createTweetWithHttpInfo(TweetCreateRequest tweetCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTweetValidateBeforeCall(tweetCreateRequest, null);
        Type localVarReturnType = new TypeToken<TweetCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTweetAsync(TweetCreateRequest tweetCreateRequest, final ApiCallback<TweetCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTweetValidateBeforeCall(tweetCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TweetCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTweetRequestBuilder {
        private String cardUri;
        private String directMessageDeepLink;
        private Boolean forSuperFollowersOnly;
        private TweetCreateRequestGeo geo;
        private TweetCreateRequestMedia media;
        private Boolean nullcast;
        private TweetCreateRequestPoll poll;
        private String quoteTweetId;
        private TweetCreateRequestReply reply;
        private String replySettings;
        private String text;

        private CreateTweetRequestBuilder() {
        }

        /**
         * Set cardUri
         * @param cardUri Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link. (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder cardUri(String cardUri) {
            this.cardUri = cardUri;
            return this;
        }
        
        /**
         * Set directMessageDeepLink
         * @param directMessageDeepLink Link to take the conversation from the public timeline to a private Direct Message. (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder directMessageDeepLink(String directMessageDeepLink) {
            this.directMessageDeepLink = directMessageDeepLink;
            return this;
        }
        
        /**
         * Set forSuperFollowersOnly
         * @param forSuperFollowersOnly Exclusive Tweet for super followers. (optional, default to false)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder forSuperFollowersOnly(Boolean forSuperFollowersOnly) {
            this.forSuperFollowersOnly = forSuperFollowersOnly;
            return this;
        }
        
        /**
         * Set geo
         * @param geo  (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder geo(TweetCreateRequestGeo geo) {
            this.geo = geo;
            return this;
        }
        
        /**
         * Set media
         * @param media  (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder media(TweetCreateRequestMedia media) {
            this.media = media;
            return this;
        }
        
        /**
         * Set nullcast
         * @param nullcast Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers. (optional, default to false)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder nullcast(Boolean nullcast) {
            this.nullcast = nullcast;
            return this;
        }
        
        /**
         * Set poll
         * @param poll  (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder poll(TweetCreateRequestPoll poll) {
            this.poll = poll;
            return this;
        }
        
        /**
         * Set quoteTweetId
         * @param quoteTweetId Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder quoteTweetId(String quoteTweetId) {
            this.quoteTweetId = quoteTweetId;
            return this;
        }
        
        /**
         * Set reply
         * @param reply  (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder reply(TweetCreateRequestReply reply) {
            this.reply = reply;
            return this;
        }
        
        /**
         * Set replySettings
         * @param replySettings Settings to indicate who can reply to the Tweet. (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder replySettings(String replySettings) {
            this.replySettings = replySettings;
            return this;
        }
        
        /**
         * Set text
         * @param text The content of the Tweet. (optional)
         * @return CreateTweetRequestBuilder
         */
        public CreateTweetRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for createTweet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TweetCreateRequest tweetCreateRequest = buildBodyParams();
            return createTweetCall(tweetCreateRequest, _callback);
        }

        private TweetCreateRequest buildBodyParams() {
            TweetCreateRequest tweetCreateRequest = new TweetCreateRequest();
            tweetCreateRequest.cardUri(this.cardUri);
            tweetCreateRequest.directMessageDeepLink(this.directMessageDeepLink);
            tweetCreateRequest.forSuperFollowersOnly(this.forSuperFollowersOnly);
            tweetCreateRequest.geo(this.geo);
            tweetCreateRequest.media(this.media);
            tweetCreateRequest.nullcast(this.nullcast);
            tweetCreateRequest.poll(this.poll);
            tweetCreateRequest.quoteTweetId(this.quoteTweetId);
            tweetCreateRequest.reply(this.reply);
            if (this.replySettings != null)
            tweetCreateRequest.replySettings(TweetCreateRequest.ReplySettingsEnum.fromValue(this.replySettings));
            tweetCreateRequest.text(this.text);
            return tweetCreateRequest;
        }

        /**
         * Execute createTweet request
         * @return TweetCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public TweetCreateResponse execute() throws ApiException {
            TweetCreateRequest tweetCreateRequest = buildBodyParams();
            ApiResponse<TweetCreateResponse> localVarResp = createTweetWithHttpInfo(tweetCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTweet request with HTTP info returned
         * @return ApiResponse&lt;TweetCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TweetCreateResponse> executeWithHttpInfo() throws ApiException {
            TweetCreateRequest tweetCreateRequest = buildBodyParams();
            return createTweetWithHttpInfo(tweetCreateRequest);
        }

        /**
         * Execute createTweet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TweetCreateResponse> _callback) throws ApiException {
            TweetCreateRequest tweetCreateRequest = buildBodyParams();
            return createTweetAsync(tweetCreateRequest, _callback);
        }
    }

    /**
     * Creation of a Tweet
     * Causes the User to create a Tweet under the authorized account.
     * @param tweetCreateRequest  (required)
     * @return CreateTweetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets">Creation of a Tweet Documentation</a>
     */
    public CreateTweetRequestBuilder createTweet() throws IllegalArgumentException {
        return new CreateTweetRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<TweetDeleteResponse> deleteByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TweetDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(String id, final ApiCallback<TweetDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TweetDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String id;

        private DeleteByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return TweetDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public TweetDeleteResponse execute() throws ApiException {
            ApiResponse<TweetDeleteResponse> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;TweetDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TweetDeleteResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TweetDeleteResponse> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Tweet delete by Tweet ID
     * Delete specified Tweet (in the path) by ID.
     * @param id The ID of the Tweet to be deleted. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id">Tweet delete by Tweet ID Documentation</a>
     */
    public DeleteByIdRequestBuilder deleteById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call getBuyersListCall(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/{id}/buyers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuyersListValidateBeforeCall(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBuyersList(Async)");
        }

        return getBuyersListCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2SpacesIdBuyersResponse> getBuyersListWithHttpInfo(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getBuyersListValidateBeforeCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesIdBuyersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBuyersListAsync(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2SpacesIdBuyersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuyersListValidateBeforeCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesIdBuyersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBuyersListRequestBuilder {
        private final String id;
        private String paginationToken;
        private Integer maxResults;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetBuyersListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getBuyersList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBuyersListCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getBuyersList request
         * @return Get2SpacesIdBuyersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesIdBuyersResponse execute() throws ApiException {
            ApiResponse<Get2SpacesIdBuyersResponse> localVarResp = getBuyersListWithHttpInfo(id, paginationToken, maxResults, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBuyersList request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesIdBuyersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesIdBuyersResponse> executeWithHttpInfo() throws ApiException {
            return getBuyersListWithHttpInfo(id, paginationToken, maxResults, userFields, expansions, tweetFields);
        }

        /**
         * Execute getBuyersList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesIdBuyersResponse> _callback) throws ApiException {
            return getBuyersListAsync(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     * Retrieves the list of Users who purchased a ticket to the given space
     * @param id The ID of the Space to be retrieved. (required)
     * @return GetBuyersListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers">Retrieve the list of Users who purchased a ticket to the given space Documentation</a>
     */
    public GetBuyersListRequestBuilder getBuyersList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetBuyersListRequestBuilder(id);
    }
    private okhttp3.Call getFilteredStreamCall(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/search/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredStreamValidateBeforeCall(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        return getFilteredStreamCall(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<FilteredStreamingTweetResponse> getFilteredStreamWithHttpInfo(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getFilteredStreamValidateBeforeCall(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<FilteredStreamingTweetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilteredStreamAsync(Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<FilteredStreamingTweetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilteredStreamValidateBeforeCall(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<FilteredStreamingTweetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilteredStreamRequestBuilder {
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetFilteredStreamRequestBuilder() {
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetFilteredStreamRequestBuilder
         */
        public GetFilteredStreamRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getFilteredStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilteredStreamCall(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getFilteredStream request
         * @return FilteredStreamingTweetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public FilteredStreamingTweetResponse execute() throws ApiException {
            ApiResponse<FilteredStreamingTweetResponse> localVarResp = getFilteredStreamWithHttpInfo(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFilteredStream request with HTTP info returned
         * @return ApiResponse&lt;FilteredStreamingTweetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilteredStreamingTweetResponse> executeWithHttpInfo() throws ApiException {
            return getFilteredStreamWithHttpInfo(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getFilteredStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilteredStreamingTweetResponse> _callback) throws ApiException {
            return getFilteredStreamAsync(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Filtered stream
     * Streams Tweets matching the stream&#39;s active rule set.
     * @return GetFilteredStreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream">Filtered stream Documentation</a>
     */
    public GetFilteredStreamRequestBuilder getFilteredStream() throws IllegalArgumentException {
        return new GetFilteredStreamRequestBuilder();
    }
    private okhttp3.Call getFirehoseStreamCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/firehose/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFirehoseStreamValidateBeforeCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partition' is set
        if (partition == null) {
            throw new ApiException("Missing the required parameter 'partition' when calling getFirehoseStream(Async)");
        }

        return getFirehoseStreamCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<StreamingTweetResponse> getFirehoseStreamWithHttpInfo(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getFirehoseStreamValidateBeforeCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<StreamingTweetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFirehoseStreamAsync(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<StreamingTweetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFirehoseStreamValidateBeforeCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<StreamingTweetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFirehoseStreamRequestBuilder {
        private final Integer partition;
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetFirehoseStreamRequestBuilder(Integer partition) {
            this.partition = partition;
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetFirehoseStreamRequestBuilder
         */
        public GetFirehoseStreamRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getFirehoseStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFirehoseStreamCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getFirehoseStream request
         * @return StreamingTweetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public StreamingTweetResponse execute() throws ApiException {
            ApiResponse<StreamingTweetResponse> localVarResp = getFirehoseStreamWithHttpInfo(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFirehoseStream request with HTTP info returned
         * @return ApiResponse&lt;StreamingTweetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StreamingTweetResponse> executeWithHttpInfo() throws ApiException {
            return getFirehoseStreamWithHttpInfo(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getFirehoseStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StreamingTweetResponse> _callback) throws ApiException {
            return getFirehoseStreamAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Firehose stream
     * Streams 100% of public Tweets.
     * @param partition The partition number. (required)
     * @return GetFirehoseStreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public GetFirehoseStreamRequestBuilder getFirehoseStream(Integer partition) throws IllegalArgumentException {
        if (partition == null) throw new IllegalArgumentException("\"partition\" is required but got null");
        return new GetFirehoseStreamRequestBuilder(partition);
    }
    private okhttp3.Call getLikedTweetsCall(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/liked_tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLikedTweetsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLikedTweets(Async)");
        }

        return getLikedTweetsCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2UsersIdLikedTweetsResponse> getLikedTweetsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getLikedTweetsValidateBeforeCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdLikedTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLikedTweetsAsync(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2UsersIdLikedTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLikedTweetsValidateBeforeCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdLikedTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLikedTweetsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetLikedTweetsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetLikedTweetsRequestBuilder
         */
        public GetLikedTweetsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getLikedTweets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLikedTweetsCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getLikedTweets request
         * @return Get2UsersIdLikedTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdLikedTweetsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdLikedTweetsResponse> localVarResp = getLikedTweetsWithHttpInfo(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLikedTweets request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdLikedTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdLikedTweetsResponse> executeWithHttpInfo() throws ApiException {
            return getLikedTweetsWithHttpInfo(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getLikedTweets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdLikedTweetsResponse> _callback) throws ApiException {
            return getLikedTweetsAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Returns Tweet objects liked by the provided User ID
     * Returns a list of Tweets liked by the provided User ID
     * @param id The ID of the User to lookup. (required)
     * @return GetLikedTweetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets">Returns Tweet objects liked by the provided User ID Documentation</a>
     */
    public GetLikedTweetsRequestBuilder getLikedTweets(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetLikedTweetsRequestBuilder(id);
    }
    private okhttp3.Call getMentionsByIdCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/mentions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMentionsByIdValidateBeforeCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMentionsById(Async)");
        }

        return getMentionsByIdCall(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2UsersIdMentionsResponse> getMentionsByIdWithHttpInfo(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getMentionsByIdValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdMentionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMentionsByIdAsync(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2UsersIdMentionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMentionsByIdValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdMentionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMentionsByIdRequestBuilder {
        private final String id;
        private String sinceId;
        private String untilId;
        private Integer maxResults;
        private String paginationToken;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetMentionsByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set sinceId
         * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetMentionsByIdRequestBuilder
         */
        public GetMentionsByIdRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getMentionsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMentionsByIdCall(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getMentionsById request
         * @return Get2UsersIdMentionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdMentionsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdMentionsResponse> localVarResp = getMentionsByIdWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMentionsById request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdMentionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdMentionsResponse> executeWithHttpInfo() throws ApiException {
            return getMentionsByIdWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getMentionsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdMentionsResponse> _callback) throws ApiException {
            return getMentionsByIdAsync(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * User mention timeline by User ID
     * Returns Tweet objects that mention username associated to the provided User ID
     * @param id The ID of the User to lookup. (required)
     * @return GetMentionsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions">User mention timeline by User ID Documentation</a>
     */
    public GetMentionsByIdRequestBuilder getMentionsById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetMentionsByIdRequestBuilder(id);
    }
    private okhttp3.Call getQuoteTweetsCall(String id, Integer maxResults, String paginationToken, Set<String> exclude, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/{id}/quote_tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteTweetsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> exclude, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuoteTweets(Async)");
        }

        return getQuoteTweetsCall(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsIdQuoteTweetsResponse> getQuoteTweetsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> exclude, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getQuoteTweetsValidateBeforeCall(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsIdQuoteTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQuoteTweetsAsync(String id, Integer maxResults, String paginationToken, Set<String> exclude, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsIdQuoteTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteTweetsValidateBeforeCall(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsIdQuoteTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQuoteTweetsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> exclude;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetQuoteTweetsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results to be returned. (optional, default to 10)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder exclude(Set<String> exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetQuoteTweetsRequestBuilder
         */
        public GetQuoteTweetsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getQuoteTweets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getQuoteTweetsCall(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getQuoteTweets request
         * @return Get2TweetsIdQuoteTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsIdQuoteTweetsResponse execute() throws ApiException {
            ApiResponse<Get2TweetsIdQuoteTweetsResponse> localVarResp = getQuoteTweetsWithHttpInfo(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQuoteTweets request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsIdQuoteTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsIdQuoteTweetsResponse> executeWithHttpInfo() throws ApiException {
            return getQuoteTweetsWithHttpInfo(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getQuoteTweets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsIdQuoteTweetsResponse> _callback) throws ApiException {
            return getQuoteTweetsAsync(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Retrieve Tweets that quote a Tweet.
     * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     * @param id A single Tweet ID. (required)
     * @return GetQuoteTweetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets">Retrieve Tweets that quote a Tweet. Documentation</a>
     */
    public GetQuoteTweetsRequestBuilder getQuoteTweets(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetQuoteTweetsRequestBuilder(id);
    }
    private okhttp3.Call getRecentTweetCountsCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/counts/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granularity", granularity));
        }

        if (searchCountFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "search_count.fields", searchCountFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentTweetCountsValidateBeforeCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getRecentTweetCounts(Async)");
        }

        return getRecentTweetCountsCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);

    }


    private ApiResponse<Get2TweetsCountsRecentResponse> getRecentTweetCountsWithHttpInfo(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields) throws ApiException {
        okhttp3.Call localVarCall = getRecentTweetCountsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsCountsRecentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentTweetCountsAsync(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback<Get2TweetsCountsRecentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentTweetCountsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsCountsRecentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentTweetCountsRequestBuilder {
        private final String query;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private String sinceId;
        private String untilId;
        private String nextToken;
        private String paginationToken;
        private String granularity;
        private Set<String> searchCountFields;

        private GetRecentTweetCountsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set sinceId
         * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set nextToken
         * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder nextToken(String nextToken) {
            this.nextToken = nextToken;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set granularity
         * @param granularity The granularity for the search counts results. (optional, default to hour)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder granularity(String granularity) {
            this.granularity = granularity;
            return this;
        }
        
        /**
         * Set searchCountFields
         * @param searchCountFields A comma separated list of SearchCount fields to display. (optional)
         * @return GetRecentTweetCountsRequestBuilder
         */
        public GetRecentTweetCountsRequestBuilder searchCountFields(Set<String> searchCountFields) {
            this.searchCountFields = searchCountFields;
            return this;
        }
        
        /**
         * Build call for getRecentTweetCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentTweetCountsCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        }


        /**
         * Execute getRecentTweetCounts request
         * @return Get2TweetsCountsRecentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsCountsRecentResponse execute() throws ApiException {
            ApiResponse<Get2TweetsCountsRecentResponse> localVarResp = getRecentTweetCountsWithHttpInfo(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentTweetCounts request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsCountsRecentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsCountsRecentResponse> executeWithHttpInfo() throws ApiException {
            return getRecentTweetCountsWithHttpInfo(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
        }

        /**
         * Execute getRecentTweetCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsCountsRecentResponse> _callback) throws ApiException {
            return getRecentTweetCountsAsync(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        }
    }

    /**
     * Recent search counts
     * Returns Tweet Counts from the last 7 days that match a search query.
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @return GetRecentTweetCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent">Recent search counts Documentation</a>
     */
    public GetRecentTweetCountsRequestBuilder getRecentTweetCounts(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            if (query != null && query.length() < 1) {
              throw new IllegalArgumentException("Invalid value for query. Length must be greater than or equal to 1.");
            }

        return new GetRecentTweetCountsRequestBuilder(query);
    }
    private okhttp3.Call getRecentTweetsCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/search/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentTweetsValidateBeforeCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getRecentTweets(Async)");
        }

        return getRecentTweetsCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsSearchRecentResponse> getRecentTweetsWithHttpInfo(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getRecentTweetsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsSearchRecentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentTweetsAsync(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsSearchRecentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentTweetsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsSearchRecentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentTweetsRequestBuilder {
        private final String query;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private String sinceId;
        private String untilId;
        private Integer maxResults;
        private String nextToken;
        private String paginationToken;
        private String sortOrder;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetRecentTweetsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set sinceId
         * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set nextToken
         * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder nextToken(String nextToken) {
            this.nextToken = nextToken;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder This order in which to return results. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetRecentTweetsRequestBuilder
         */
        public GetRecentTweetsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getRecentTweets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentTweetsCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getRecentTweets request
         * @return Get2TweetsSearchRecentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsSearchRecentResponse execute() throws ApiException {
            ApiResponse<Get2TweetsSearchRecentResponse> localVarResp = getRecentTweetsWithHttpInfo(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentTweets request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsSearchRecentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsSearchRecentResponse> executeWithHttpInfo() throws ApiException {
            return getRecentTweetsWithHttpInfo(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getRecentTweets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsSearchRecentResponse> _callback) throws ApiException {
            return getRecentTweetsAsync(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Recent search
     * Returns Tweets from the last 7 days that match a search query.
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @return GetRecentTweetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent">Recent search Documentation</a>
     */
    public GetRecentTweetsRequestBuilder getRecentTweets(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            if (query != null && query.length() < 1) {
              throw new IllegalArgumentException("Invalid value for query. Length must be greater than or equal to 1.");
            }

        return new GetRecentTweetsRequestBuilder(query);
    }
    private okhttp3.Call getTweetCountsCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/counts/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granularity", granularity));
        }

        if (searchCountFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "search_count.fields", searchCountFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTweetCountsValidateBeforeCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getTweetCounts(Async)");
        }

        return getTweetCountsCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);

    }


    private ApiResponse<Get2TweetsCountsAllResponse> getTweetCountsWithHttpInfo(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields) throws ApiException {
        okhttp3.Call localVarCall = getTweetCountsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsCountsAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTweetCountsAsync(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, String nextToken, String paginationToken, String granularity, Set<String> searchCountFields, final ApiCallback<Get2TweetsCountsAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTweetCountsValidateBeforeCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsCountsAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTweetCountsRequestBuilder {
        private final String query;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private String sinceId;
        private String untilId;
        private String nextToken;
        private String paginationToken;
        private String granularity;
        private Set<String> searchCountFields;

        private GetTweetCountsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set sinceId
         * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set nextToken
         * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder nextToken(String nextToken) {
            this.nextToken = nextToken;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set granularity
         * @param granularity The granularity for the search counts results. (optional, default to hour)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder granularity(String granularity) {
            this.granularity = granularity;
            return this;
        }
        
        /**
         * Set searchCountFields
         * @param searchCountFields A comma separated list of SearchCount fields to display. (optional)
         * @return GetTweetCountsRequestBuilder
         */
        public GetTweetCountsRequestBuilder searchCountFields(Set<String> searchCountFields) {
            this.searchCountFields = searchCountFields;
            return this;
        }
        
        /**
         * Build call for getTweetCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTweetCountsCall(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        }


        /**
         * Execute getTweetCounts request
         * @return Get2TweetsCountsAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsCountsAllResponse execute() throws ApiException {
            ApiResponse<Get2TweetsCountsAllResponse> localVarResp = getTweetCountsWithHttpInfo(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTweetCounts request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsCountsAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsCountsAllResponse> executeWithHttpInfo() throws ApiException {
            return getTweetCountsWithHttpInfo(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
        }

        /**
         * Execute getTweetCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsCountsAllResponse> _callback) throws ApiException {
            return getTweetCountsAsync(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, _callback);
        }
    }

    /**
     * Full archive search counts
     * Returns Tweet Counts that match a search query.
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @return GetTweetCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all">Full archive search counts Documentation</a>
     */
    public GetTweetCountsRequestBuilder getTweetCounts(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            if (query != null && query.length() < 1) {
              throw new IllegalArgumentException("Invalid value for query. Length must be greater than or equal to 1.");
            }

        return new GetTweetCountsRequestBuilder(query);
    }
    private okhttp3.Call getTweetsCall(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/{id}/tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTweetsValidateBeforeCall(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTweets(Async)");
        }

        return getTweetsCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2SpacesIdTweetsResponse> getTweetsWithHttpInfo(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getTweetsValidateBeforeCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesIdTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTweetsAsync(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2SpacesIdTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTweetsValidateBeforeCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesIdTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTweetsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetTweetsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getTweets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTweetsCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getTweets request
         * @return Get2SpacesIdTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesIdTweetsResponse execute() throws ApiException {
            ApiResponse<Get2SpacesIdTweetsResponse> localVarResp = getTweetsWithHttpInfo(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTweets request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesIdTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesIdTweetsResponse> executeWithHttpInfo() throws ApiException {
            return getTweetsWithHttpInfo(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getTweets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesIdTweetsResponse> _callback) throws ApiException {
            return getTweetsAsync(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Retrieve Tweets from a Space.
     * Retrieves Tweets shared in the specified Space.
     * @param id The ID of the Space to be retrieved. (required)
     * @return GetTweetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-tweets">Retrieve Tweets from a Space. Documentation</a>
     */
    public GetTweetsRequestBuilder getTweets(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTweetsRequestBuilder(id);
    }
    private okhttp3.Call getUserHomeTimelineCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/timelines/reverse_chronological"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserHomeTimelineValidateBeforeCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserHomeTimeline(Async)");
        }

        return getUserHomeTimelineCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2UsersIdTimelinesReverseChronologicalResponse> getUserHomeTimelineWithHttpInfo(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getUserHomeTimelineValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdTimelinesReverseChronologicalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserHomeTimelineAsync(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2UsersIdTimelinesReverseChronologicalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserHomeTimelineValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdTimelinesReverseChronologicalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserHomeTimelineRequestBuilder {
        private final String id;
        private String sinceId;
        private String untilId;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> exclude;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetUserHomeTimelineRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set sinceId
         * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder exclude(Set<String> exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetUserHomeTimelineRequestBuilder
         */
        public GetUserHomeTimelineRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getUserHomeTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserHomeTimelineCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getUserHomeTimeline request
         * @return Get2UsersIdTimelinesReverseChronologicalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdTimelinesReverseChronologicalResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdTimelinesReverseChronologicalResponse> localVarResp = getUserHomeTimelineWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserHomeTimeline request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdTimelinesReverseChronologicalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdTimelinesReverseChronologicalResponse> executeWithHttpInfo() throws ApiException {
            return getUserHomeTimelineWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getUserHomeTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdTimelinesReverseChronologicalResponse> _callback) throws ApiException {
            return getUserHomeTimelineAsync(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * User home timeline by User ID
     * Returns Tweet objects that appears in the provided User ID&#39;s home timeline
     * @param id The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of. (required)
     * @return GetUserHomeTimelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological">User home timeline by User ID Documentation</a>
     */
    public GetUserHomeTimelineRequestBuilder getUserHomeTimeline(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserHomeTimelineRequestBuilder(id);
    }
    private okhttp3.Call hideReplyCall(String tweetId, TweetHideRequest tweetHideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tweetHideRequest;

        // create path and map variables
        String localVarPath = "/2/tweets/{tweet_id}/hidden"
            .replace("{" + "tweet_id" + "}", localVarApiClient.escapeString(tweetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideReplyValidateBeforeCall(String tweetId, TweetHideRequest tweetHideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling hideReply(Async)");
        }

        return hideReplyCall(tweetId, tweetHideRequest, _callback);

    }


    private ApiResponse<TweetHideResponse> hideReplyWithHttpInfo(String tweetId, TweetHideRequest tweetHideRequest) throws ApiException {
        okhttp3.Call localVarCall = hideReplyValidateBeforeCall(tweetId, tweetHideRequest, null);
        Type localVarReturnType = new TypeToken<TweetHideResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call hideReplyAsync(String tweetId, TweetHideRequest tweetHideRequest, final ApiCallback<TweetHideResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideReplyValidateBeforeCall(tweetId, tweetHideRequest, _callback);
        Type localVarReturnType = new TypeToken<TweetHideResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class HideReplyRequestBuilder {
        private final Boolean hidden;
        private final String tweetId;

        private HideReplyRequestBuilder(Boolean hidden, String tweetId) {
            this.hidden = hidden;
            this.tweetId = tweetId;
        }

        /**
         * Build call for hideReply
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TweetHideRequest tweetHideRequest = buildBodyParams();
            return hideReplyCall(tweetId, tweetHideRequest, _callback);
        }

        private TweetHideRequest buildBodyParams() {
            TweetHideRequest tweetHideRequest = new TweetHideRequest();
            tweetHideRequest.hidden(this.hidden);
            return tweetHideRequest;
        }

        /**
         * Execute hideReply request
         * @return TweetHideResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public TweetHideResponse execute() throws ApiException {
            TweetHideRequest tweetHideRequest = buildBodyParams();
            ApiResponse<TweetHideResponse> localVarResp = hideReplyWithHttpInfo(tweetId, tweetHideRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute hideReply request with HTTP info returned
         * @return ApiResponse&lt;TweetHideResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TweetHideResponse> executeWithHttpInfo() throws ApiException {
            TweetHideRequest tweetHideRequest = buildBodyParams();
            return hideReplyWithHttpInfo(tweetId, tweetHideRequest);
        }

        /**
         * Execute hideReply request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TweetHideResponse> _callback) throws ApiException {
            TweetHideRequest tweetHideRequest = buildBodyParams();
            return hideReplyAsync(tweetId, tweetHideRequest, _callback);
        }
    }

    /**
     * Hide replies
     * Hides or unhides a reply to an owned conversation.
     * @param tweetId The ID of the reply that you want to hide or unhide. (required)
     * @return HideReplyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden">Hide replies Documentation</a>
     */
    public HideReplyRequestBuilder hideReply(Boolean hidden, String tweetId) throws IllegalArgumentException {
        if (hidden == null) throw new IllegalArgumentException("\"hidden\" is required but got null");
        if (tweetId == null) throw new IllegalArgumentException("\"tweetId\" is required but got null");
            

        return new HideReplyRequestBuilder(hidden, tweetId);
    }
    private okhttp3.Call likeTweetCall(String id, UsersLikesCreateRequest usersLikesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersLikesCreateRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/likes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeTweetValidateBeforeCall(String id, UsersLikesCreateRequest usersLikesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling likeTweet(Async)");
        }

        return likeTweetCall(id, usersLikesCreateRequest, _callback);

    }


    private ApiResponse<UsersLikesCreateResponse> likeTweetWithHttpInfo(String id, UsersLikesCreateRequest usersLikesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = likeTweetValidateBeforeCall(id, usersLikesCreateRequest, null);
        Type localVarReturnType = new TypeToken<UsersLikesCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call likeTweetAsync(String id, UsersLikesCreateRequest usersLikesCreateRequest, final ApiCallback<UsersLikesCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeTweetValidateBeforeCall(id, usersLikesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersLikesCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LikeTweetRequestBuilder {
        private final String tweetId;
        private final String id;

        private LikeTweetRequestBuilder(String tweetId, String id) {
            this.tweetId = tweetId;
            this.id = id;
        }

        /**
         * Build call for likeTweet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersLikesCreateRequest usersLikesCreateRequest = buildBodyParams();
            return likeTweetCall(id, usersLikesCreateRequest, _callback);
        }

        private UsersLikesCreateRequest buildBodyParams() {
            UsersLikesCreateRequest usersLikesCreateRequest = new UsersLikesCreateRequest();
            usersLikesCreateRequest.tweetId(this.tweetId);
            return usersLikesCreateRequest;
        }

        /**
         * Execute likeTweet request
         * @return UsersLikesCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersLikesCreateResponse execute() throws ApiException {
            UsersLikesCreateRequest usersLikesCreateRequest = buildBodyParams();
            ApiResponse<UsersLikesCreateResponse> localVarResp = likeTweetWithHttpInfo(id, usersLikesCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute likeTweet request with HTTP info returned
         * @return ApiResponse&lt;UsersLikesCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersLikesCreateResponse> executeWithHttpInfo() throws ApiException {
            UsersLikesCreateRequest usersLikesCreateRequest = buildBodyParams();
            return likeTweetWithHttpInfo(id, usersLikesCreateRequest);
        }

        /**
         * Execute likeTweet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersLikesCreateResponse> _callback) throws ApiException {
            UsersLikesCreateRequest usersLikesCreateRequest = buildBodyParams();
            return likeTweetAsync(id, usersLikesCreateRequest, _callback);
        }
    }

    /**
     * Causes the User (in the path) to like the specified Tweet
     * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     * @param id The ID of the authenticated source User that is requesting to like the Tweet. (required)
     * @return LikeTweetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-id-likes">Causes the User (in the path) to like the specified Tweet Documentation</a>
     */
    public LikeTweetRequestBuilder likeTweet(String tweetId, String id) throws IllegalArgumentException {
        if (tweetId == null) throw new IllegalArgumentException("\"tweetId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LikeTweetRequestBuilder(tweetId, id);
    }
    private okhttp3.Call listByListIdCall(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}/tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByListIdValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listByListId(Async)");
        }

        return listByListIdCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2ListsIdTweetsResponse> listByListIdWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = listByListIdValidateBeforeCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2ListsIdTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByListIdAsync(String id, Integer maxResults, String paginationToken, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2ListsIdTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByListIdValidateBeforeCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ListsIdTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByListIdRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private ListByListIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return ListByListIdRequestBuilder
         */
        public ListByListIdRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for listByListId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByListIdCall(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute listByListId request
         * @return Get2ListsIdTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ListsIdTweetsResponse execute() throws ApiException {
            ApiResponse<Get2ListsIdTweetsResponse> localVarResp = listByListIdWithHttpInfo(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByListId request with HTTP info returned
         * @return ApiResponse&lt;Get2ListsIdTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ListsIdTweetsResponse> executeWithHttpInfo() throws ApiException {
            return listByListIdWithHttpInfo(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute listByListId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ListsIdTweetsResponse> _callback) throws ApiException {
            return listByListIdAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * List Tweets timeline by List ID.
     * Returns a list of Tweets associated with the provided List ID.
     * @param id The ID of the List. (required)
     * @return ListByListIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets">List Tweets timeline by List ID. Documentation</a>
     */
    public ListByListIdRequestBuilder listByListId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListByListIdRequestBuilder(id);
    }
    private okhttp3.Call listByUserIdCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByUserIdValidateBeforeCall(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listByUserId(Async)");
        }

        return listByUserIdCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2UsersIdTweetsResponse> listByUserIdWithHttpInfo(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = listByUserIdValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByUserIdAsync(String id, String sinceId, String untilId, Integer maxResults, String paginationToken, Set<String> exclude, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2UsersIdTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByUserIdValidateBeforeCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByUserIdRequestBuilder {
        private final String id;
        private String sinceId;
        private String untilId;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> exclude;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private ListByUserIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set sinceId
         * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder exclude(Set<String> exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for listByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByUserIdCall(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute listByUserId request
         * @return Get2UsersIdTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdTweetsResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdTweetsResponse> localVarResp = listByUserIdWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByUserId request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdTweetsResponse> executeWithHttpInfo() throws ApiException {
            return listByUserIdWithHttpInfo(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute listByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdTweetsResponse> _callback) throws ApiException {
            return listByUserIdAsync(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * User Tweets timeline by User ID
     * Returns a list of Tweets authored by the provided User ID
     * @param id The ID of the User to lookup. (required)
     * @return ListByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets">User Tweets timeline by User ID Documentation</a>
     */
    public ListByUserIdRequestBuilder listByUserId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListByUserIdRequestBuilder(id);
    }
    private okhttp3.Call lookupByIdCall(String id, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByIdValidateBeforeCall(String id, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lookupById(Async)");
        }

        return lookupByIdCall(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsIdResponse> lookupByIdWithHttpInfo(String id, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByIdValidateBeforeCall(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByIdAsync(String id, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByIdValidateBeforeCall(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByIdRequestBuilder {
        private final String id;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private LookupByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for lookupById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByIdCall(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute lookupById request
         * @return Get2TweetsIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsIdResponse execute() throws ApiException {
            ApiResponse<Get2TweetsIdResponse> localVarResp = lookupByIdWithHttpInfo(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupById request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsIdResponse> executeWithHttpInfo() throws ApiException {
            return lookupByIdWithHttpInfo(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute lookupById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsIdResponse> _callback) throws ApiException {
            return lookupByIdAsync(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Tweet lookup by Tweet ID
     * Returns a variety of information about the Tweet specified by the requested ID.
     * @param id A single Tweet ID. (required)
     * @return LookupByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">Tweet lookup by Tweet ID Documentation</a>
     */
    public LookupByIdRequestBuilder lookupById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LookupByIdRequestBuilder(id);
    }
    private okhttp3.Call lookupByTweetIdsCall(List<String> ids, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByTweetIdsValidateBeforeCall(List<String> ids, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lookupByTweetIds(Async)");
        }

        return lookupByTweetIdsCall(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsResponse> lookupByTweetIdsWithHttpInfo(List<String> ids, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByTweetIdsValidateBeforeCall(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByTweetIdsAsync(List<String> ids, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByTweetIdsValidateBeforeCall(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByTweetIdsRequestBuilder {
        private final List<String> ids;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private LookupByTweetIdsRequestBuilder(List<String> ids) {
            this.ids = ids;
        }

        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return LookupByTweetIdsRequestBuilder
         */
        public LookupByTweetIdsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for lookupByTweetIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByTweetIdsCall(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute lookupByTweetIds request
         * @return Get2TweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsResponse execute() throws ApiException {
            ApiResponse<Get2TweetsResponse> localVarResp = lookupByTweetIdsWithHttpInfo(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByTweetIds request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsResponse> executeWithHttpInfo() throws ApiException {
            return lookupByTweetIdsWithHttpInfo(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute lookupByTweetIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsResponse> _callback) throws ApiException {
            return lookupByTweetIdsAsync(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Tweet lookup by Tweet IDs
     * Returns a variety of information about the Tweet specified by the requested ID.
     * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. (required)
     * @return LookupByTweetIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets">Tweet lookup by Tweet IDs Documentation</a>
     */
    public LookupByTweetIdsRequestBuilder lookupByTweetIds(List<String> ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        return new LookupByTweetIdsRequestBuilder(ids);
    }
    private okhttp3.Call retweetTweetByIdCall(String id, UsersRetweetsCreateRequest usersRetweetsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersRetweetsCreateRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/retweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retweetTweetByIdValidateBeforeCall(String id, UsersRetweetsCreateRequest usersRetweetsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retweetTweetById(Async)");
        }

        return retweetTweetByIdCall(id, usersRetweetsCreateRequest, _callback);

    }


    private ApiResponse<UsersRetweetsCreateResponse> retweetTweetByIdWithHttpInfo(String id, UsersRetweetsCreateRequest usersRetweetsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = retweetTweetByIdValidateBeforeCall(id, usersRetweetsCreateRequest, null);
        Type localVarReturnType = new TypeToken<UsersRetweetsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retweetTweetByIdAsync(String id, UsersRetweetsCreateRequest usersRetweetsCreateRequest, final ApiCallback<UsersRetweetsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retweetTweetByIdValidateBeforeCall(id, usersRetweetsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersRetweetsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetweetTweetByIdRequestBuilder {
        private final String tweetId;
        private final String id;

        private RetweetTweetByIdRequestBuilder(String tweetId, String id) {
            this.tweetId = tweetId;
            this.id = id;
        }

        /**
         * Build call for retweetTweetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersRetweetsCreateRequest usersRetweetsCreateRequest = buildBodyParams();
            return retweetTweetByIdCall(id, usersRetweetsCreateRequest, _callback);
        }

        private UsersRetweetsCreateRequest buildBodyParams() {
            UsersRetweetsCreateRequest usersRetweetsCreateRequest = new UsersRetweetsCreateRequest();
            usersRetweetsCreateRequest.tweetId(this.tweetId);
            return usersRetweetsCreateRequest;
        }

        /**
         * Execute retweetTweetById request
         * @return UsersRetweetsCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersRetweetsCreateResponse execute() throws ApiException {
            UsersRetweetsCreateRequest usersRetweetsCreateRequest = buildBodyParams();
            ApiResponse<UsersRetweetsCreateResponse> localVarResp = retweetTweetByIdWithHttpInfo(id, usersRetweetsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retweetTweetById request with HTTP info returned
         * @return ApiResponse&lt;UsersRetweetsCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersRetweetsCreateResponse> executeWithHttpInfo() throws ApiException {
            UsersRetweetsCreateRequest usersRetweetsCreateRequest = buildBodyParams();
            return retweetTweetByIdWithHttpInfo(id, usersRetweetsCreateRequest);
        }

        /**
         * Execute retweetTweetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersRetweetsCreateResponse> _callback) throws ApiException {
            UsersRetweetsCreateRequest usersRetweetsCreateRequest = buildBodyParams();
            return retweetTweetByIdAsync(id, usersRetweetsCreateRequest, _callback);
        }
    }

    /**
     * Causes the User (in the path) to retweet the specified Tweet.
     * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     * @param id The ID of the authenticated source User that is requesting to retweet the Tweet. (required)
     * @return RetweetTweetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets">Causes the User (in the path) to retweet the specified Tweet. Documentation</a>
     */
    public RetweetTweetByIdRequestBuilder retweetTweetById(String tweetId, String id) throws IllegalArgumentException {
        if (tweetId == null) throw new IllegalArgumentException("\"tweetId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RetweetTweetByIdRequestBuilder(tweetId, id);
    }
    private okhttp3.Call searchAllCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/search/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (untilId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_id", untilId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAllValidateBeforeCall(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchAll(Async)");
        }

        return searchAllCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsSearchAllResponse> searchAllWithHttpInfo(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = searchAllValidateBeforeCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsSearchAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAllAsync(String query, OffsetDateTime startTime, OffsetDateTime endTime, String sinceId, String untilId, Integer maxResults, String nextToken, String paginationToken, String sortOrder, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsSearchAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAllValidateBeforeCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsSearchAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAllRequestBuilder {
        private final String query;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private String sinceId;
        private String untilId;
        private Integer maxResults;
        private String nextToken;
        private String paginationToken;
        private String sortOrder;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private SearchAllRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set sinceId
         * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder sinceId(String sinceId) {
            this.sinceId = sinceId;
            return this;
        }
        
        /**
         * Set untilId
         * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder untilId(String untilId) {
            this.untilId = untilId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set nextToken
         * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder nextToken(String nextToken) {
            this.nextToken = nextToken;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder This order in which to return results. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return SearchAllRequestBuilder
         */
        public SearchAllRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for searchAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAllCall(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute searchAll request
         * @return Get2TweetsSearchAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsSearchAllResponse execute() throws ApiException {
            ApiResponse<Get2TweetsSearchAllResponse> localVarResp = searchAllWithHttpInfo(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAll request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsSearchAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsSearchAllResponse> executeWithHttpInfo() throws ApiException {
            return searchAllWithHttpInfo(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute searchAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsSearchAllResponse> _callback) throws ApiException {
            return searchAllAsync(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Full-archive search
     * Returns Tweets that match a search query.
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @return SearchAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all">Full-archive search Documentation</a>
     */
    public SearchAllRequestBuilder searchAll(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            if (query != null && query.length() < 1) {
              throw new IllegalArgumentException("Invalid value for query. Length must be greater than or equal to 1.");
            }

        return new SearchAllRequestBuilder(query);
    }
    private okhttp3.Call searchStreamRulesCall(List<String> ids, Integer maxResults, String paginationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/search/stream/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchStreamRulesValidateBeforeCall(List<String> ids, Integer maxResults, String paginationToken, final ApiCallback _callback) throws ApiException {
        return searchStreamRulesCall(ids, maxResults, paginationToken, _callback);

    }


    private ApiResponse<RulesLookupResponse> searchStreamRulesWithHttpInfo(List<String> ids, Integer maxResults, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = searchStreamRulesValidateBeforeCall(ids, maxResults, paginationToken, null);
        Type localVarReturnType = new TypeToken<RulesLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchStreamRulesAsync(List<String> ids, Integer maxResults, String paginationToken, final ApiCallback<RulesLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchStreamRulesValidateBeforeCall(ids, maxResults, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<RulesLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchStreamRulesRequestBuilder {
        private List<String> ids;
        private Integer maxResults;
        private String paginationToken;

        private SearchStreamRulesRequestBuilder() {
        }

        /**
         * Set ids
         * @param ids A comma-separated list of Rule IDs. (optional)
         * @return SearchStreamRulesRequestBuilder
         */
        public SearchStreamRulesRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 1000)
         * @return SearchStreamRulesRequestBuilder
         */
        public SearchStreamRulesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
         * @return SearchStreamRulesRequestBuilder
         */
        public SearchStreamRulesRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Build call for searchStreamRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchStreamRulesCall(ids, maxResults, paginationToken, _callback);
        }


        /**
         * Execute searchStreamRules request
         * @return RulesLookupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public RulesLookupResponse execute() throws ApiException {
            ApiResponse<RulesLookupResponse> localVarResp = searchStreamRulesWithHttpInfo(ids, maxResults, paginationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchStreamRules request with HTTP info returned
         * @return ApiResponse&lt;RulesLookupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesLookupResponse> executeWithHttpInfo() throws ApiException {
            return searchStreamRulesWithHttpInfo(ids, maxResults, paginationToken);
        }

        /**
         * Execute searchStreamRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesLookupResponse> _callback) throws ApiException {
            return searchStreamRulesAsync(ids, maxResults, paginationToken, _callback);
        }
    }

    /**
     * Rules lookup
     * Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     * @return SearchStreamRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules">Rules lookup Documentation</a>
     */
    public SearchStreamRulesRequestBuilder searchStreamRules() throws IllegalArgumentException {
        return new SearchStreamRulesRequestBuilder();
    }
    private okhttp3.Call streamSampleCall(Integer backfillMinutes, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/sample/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSampleValidateBeforeCall(Integer backfillMinutes, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        return streamSampleCall(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<StreamingTweetResponse> streamSampleWithHttpInfo(Integer backfillMinutes, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = streamSampleValidateBeforeCall(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<StreamingTweetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call streamSampleAsync(Integer backfillMinutes, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<StreamingTweetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSampleValidateBeforeCall(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<StreamingTweetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StreamSampleRequestBuilder {
        private Integer backfillMinutes;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private StreamSampleRequestBuilder() {
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return StreamSampleRequestBuilder
         */
        public StreamSampleRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for streamSample
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamSampleCall(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute streamSample request
         * @return StreamingTweetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public StreamingTweetResponse execute() throws ApiException {
            ApiResponse<StreamingTweetResponse> localVarResp = streamSampleWithHttpInfo(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute streamSample request with HTTP info returned
         * @return ApiResponse&lt;StreamingTweetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StreamingTweetResponse> executeWithHttpInfo() throws ApiException {
            return streamSampleWithHttpInfo(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute streamSample request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StreamingTweetResponse> _callback) throws ApiException {
            return streamSampleAsync(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Sample stream
     * Streams a deterministic 1% of public Tweets.
     * @return StreamSampleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/volume-streams/api-reference/get-tweets-sample-stream">Sample stream Documentation</a>
     */
    public StreamSampleRequestBuilder streamSample() throws IllegalArgumentException {
        return new StreamSampleRequestBuilder();
    }
    private okhttp3.Call streamSample10Call(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/sample10/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backfillMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backfill_minutes", backfillMinutes));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSample10ValidateBeforeCall(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partition' is set
        if (partition == null) {
            throw new ApiException("Missing the required parameter 'partition' when calling streamSample10(Async)");
        }

        return streamSample10Call(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2TweetsSample10StreamResponse> streamSample10WithHttpInfo(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = streamSample10ValidateBeforeCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsSample10StreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call streamSample10Async(Integer partition, Integer backfillMinutes, OffsetDateTime startTime, OffsetDateTime endTime, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2TweetsSample10StreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSample10ValidateBeforeCall(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsSample10StreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StreamSample10RequestBuilder {
        private final Integer partition;
        private Integer backfillMinutes;
        private OffsetDateTime startTime;
        private OffsetDateTime endTime;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private StreamSample10RequestBuilder(Integer partition) {
            this.partition = partition;
        }

        /**
         * Set backfillMinutes
         * @param backfillMinutes The number of minutes of backfill requested. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder backfillMinutes(Integer backfillMinutes) {
            this.backfillMinutes = backfillMinutes;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder endTime(OffsetDateTime endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return StreamSample10RequestBuilder
         */
        public StreamSample10RequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for streamSample10
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamSample10Call(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute streamSample10 request
         * @return Get2TweetsSample10StreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsSample10StreamResponse execute() throws ApiException {
            ApiResponse<Get2TweetsSample10StreamResponse> localVarResp = streamSample10WithHttpInfo(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute streamSample10 request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsSample10StreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsSample10StreamResponse> executeWithHttpInfo() throws ApiException {
            return streamSample10WithHttpInfo(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute streamSample10 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsSample10StreamResponse> _callback) throws ApiException {
            return streamSample10Async(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Sample 10% stream
     * Streams a deterministic 10% of public Tweets.
     * @param partition The partition number. (required)
     * @return StreamSample10RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamSample10RequestBuilder streamSample10(Integer partition) throws IllegalArgumentException {
        if (partition == null) throw new IllegalArgumentException("\"partition\" is required but got null");
        return new StreamSample10RequestBuilder(partition);
    }
    private okhttp3.Call unlikeTweetByIdCall(String id, String tweetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/likes/{tweet_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tweet_id" + "}", localVarApiClient.escapeString(tweetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeTweetByIdValidateBeforeCall(String id, String tweetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlikeTweetById(Async)");
        }

        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling unlikeTweetById(Async)");
        }

        return unlikeTweetByIdCall(id, tweetId, _callback);

    }


    private ApiResponse<UsersLikesDeleteResponse> unlikeTweetByIdWithHttpInfo(String id, String tweetId) throws ApiException {
        okhttp3.Call localVarCall = unlikeTweetByIdValidateBeforeCall(id, tweetId, null);
        Type localVarReturnType = new TypeToken<UsersLikesDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unlikeTweetByIdAsync(String id, String tweetId, final ApiCallback<UsersLikesDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeTweetByIdValidateBeforeCall(id, tweetId, _callback);
        Type localVarReturnType = new TypeToken<UsersLikesDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnlikeTweetByIdRequestBuilder {
        private final String id;
        private final String tweetId;

        private UnlikeTweetByIdRequestBuilder(String id, String tweetId) {
            this.id = id;
            this.tweetId = tweetId;
        }

        /**
         * Build call for unlikeTweetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlikeTweetByIdCall(id, tweetId, _callback);
        }


        /**
         * Execute unlikeTweetById request
         * @return UsersLikesDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersLikesDeleteResponse execute() throws ApiException {
            ApiResponse<UsersLikesDeleteResponse> localVarResp = unlikeTweetByIdWithHttpInfo(id, tweetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unlikeTweetById request with HTTP info returned
         * @return ApiResponse&lt;UsersLikesDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersLikesDeleteResponse> executeWithHttpInfo() throws ApiException {
            return unlikeTweetByIdWithHttpInfo(id, tweetId);
        }

        /**
         * Execute unlikeTweetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersLikesDeleteResponse> _callback) throws ApiException {
            return unlikeTweetByIdAsync(id, tweetId, _callback);
        }
    }

    /**
     * Causes the User (in the path) to unlike the specified Tweet
     * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     * @param id The ID of the authenticated source User that is requesting to unlike the Tweet. (required)
     * @param tweetId The ID of the Tweet that the User is requesting to unlike. (required)
     * @return UnlikeTweetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id">Causes the User (in the path) to unlike the specified Tweet Documentation</a>
     */
    public UnlikeTweetByIdRequestBuilder unlikeTweetById(String id, String tweetId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (tweetId == null) throw new IllegalArgumentException("\"tweetId\" is required but got null");
            

        return new UnlikeTweetByIdRequestBuilder(id, tweetId);
    }
    private okhttp3.Call unretweetByIdCall(String id, String sourceTweetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/retweets/{source_tweet_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "source_tweet_id" + "}", localVarApiClient.escapeString(sourceTweetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unretweetByIdValidateBeforeCall(String id, String sourceTweetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unretweetById(Async)");
        }

        // verify the required parameter 'sourceTweetId' is set
        if (sourceTweetId == null) {
            throw new ApiException("Missing the required parameter 'sourceTweetId' when calling unretweetById(Async)");
        }

        return unretweetByIdCall(id, sourceTweetId, _callback);

    }


    private ApiResponse<UsersRetweetsDeleteResponse> unretweetByIdWithHttpInfo(String id, String sourceTweetId) throws ApiException {
        okhttp3.Call localVarCall = unretweetByIdValidateBeforeCall(id, sourceTweetId, null);
        Type localVarReturnType = new TypeToken<UsersRetweetsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unretweetByIdAsync(String id, String sourceTweetId, final ApiCallback<UsersRetweetsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unretweetByIdValidateBeforeCall(id, sourceTweetId, _callback);
        Type localVarReturnType = new TypeToken<UsersRetweetsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnretweetByIdRequestBuilder {
        private final String id;
        private final String sourceTweetId;

        private UnretweetByIdRequestBuilder(String id, String sourceTweetId) {
            this.id = id;
            this.sourceTweetId = sourceTweetId;
        }

        /**
         * Build call for unretweetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unretweetByIdCall(id, sourceTweetId, _callback);
        }


        /**
         * Execute unretweetById request
         * @return UsersRetweetsDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersRetweetsDeleteResponse execute() throws ApiException {
            ApiResponse<UsersRetweetsDeleteResponse> localVarResp = unretweetByIdWithHttpInfo(id, sourceTweetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unretweetById request with HTTP info returned
         * @return ApiResponse&lt;UsersRetweetsDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersRetweetsDeleteResponse> executeWithHttpInfo() throws ApiException {
            return unretweetByIdWithHttpInfo(id, sourceTweetId);
        }

        /**
         * Execute unretweetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersRetweetsDeleteResponse> _callback) throws ApiException {
            return unretweetByIdAsync(id, sourceTweetId, _callback);
        }
    }

    /**
     * Causes the User (in the path) to unretweet the specified Tweet
     * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     * @param id The ID of the authenticated source User that is requesting to retweet the Tweet. (required)
     * @param sourceTweetId The ID of the Tweet that the User is requesting to unretweet. (required)
     * @return UnretweetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id">Causes the User (in the path) to unretweet the specified Tweet Documentation</a>
     */
    public UnretweetByIdRequestBuilder unretweetById(String id, String sourceTweetId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (sourceTweetId == null) throw new IllegalArgumentException("\"sourceTweetId\" is required but got null");
            

        return new UnretweetByIdRequestBuilder(id, sourceTweetId);
    }
}
