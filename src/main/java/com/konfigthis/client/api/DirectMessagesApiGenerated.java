/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateDmConversationRequest;
import com.konfigthis.client.model.CreateDmEventResponse;
import com.konfigthis.client.model.CreateTextMessageRequestAttachmentsInner;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2DmConversationsIdDmEventsResponse;
import com.konfigthis.client.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import com.konfigthis.client.model.Get2DmEventsResponse;
import com.konfigthis.client.model.Problem;
import java.util.Set;
import com.konfigthis.client.model.TACreateMessageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DirectMessagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectMessagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DirectMessagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDmConversationCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDmConversationRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDmConversationValidateBeforeCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        return createNewDmConversationCall(createDmConversationRequest, _callback);

    }


    private ApiResponse<CreateDmEventResponse> createNewDmConversationWithHttpInfo(CreateDmConversationRequest createDmConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDmConversationValidateBeforeCall(createDmConversationRequest, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDmConversationAsync(CreateDmConversationRequest createDmConversationRequest, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDmConversationValidateBeforeCall(createDmConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDmConversationRequestBuilder {
        private final String conversationType;
        private final TACreateMessageRequest message;
        private final List<String> participantIds;

        private CreateNewDmConversationRequestBuilder(String conversationType, TACreateMessageRequest message, List<String> participantIds) {
            this.conversationType = conversationType;
            this.message = message;
            this.participantIds = participantIds;
        }

        /**
         * Build call for createNewDmConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDmConversationRequest createDmConversationRequest = buildBodyParams();
            return createNewDmConversationCall(createDmConversationRequest, _callback);
        }

        private CreateDmConversationRequest buildBodyParams() {
            CreateDmConversationRequest createDmConversationRequest = new CreateDmConversationRequest();
            if (this.conversationType != null)
            createDmConversationRequest.conversationType(CreateDmConversationRequest.ConversationTypeEnum.fromValue(this.conversationType));
            createDmConversationRequest.message(this.message);
            createDmConversationRequest.participantIds(this.participantIds);
            return createDmConversationRequest;
        }

        /**
         * Execute createNewDmConversation request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            CreateDmConversationRequest createDmConversationRequest = buildBodyParams();
            ApiResponse<CreateDmEventResponse> localVarResp = createNewDmConversationWithHttpInfo(createDmConversationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDmConversation request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
            CreateDmConversationRequest createDmConversationRequest = buildBodyParams();
            return createNewDmConversationWithHttpInfo(createDmConversationRequest);
        }

        /**
         * Execute createNewDmConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            CreateDmConversationRequest createDmConversationRequest = buildBodyParams();
            return createNewDmConversationAsync(createDmConversationRequest, _callback);
        }
    }

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     * @return CreateNewDmConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDmConversationRequestBuilder createNewDmConversation(String conversationType, TACreateMessageRequest message, List<String> participantIds) throws IllegalArgumentException {
        if (conversationType == null) throw new IllegalArgumentException("\"conversationType\" is required but got null");
            

        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
        if (participantIds == null) throw new IllegalArgumentException("\"participantIds\" is required but got null");
        return new CreateNewDmConversationRequestBuilder(conversationType, message, participantIds);
    }
    private okhttp3.Call getDmEventsCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/dm_events"
            .replace("{" + "participant_id" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmEventsValidateBeforeCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getDmEvents(Async)");
        }

        return getDmEventsCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);

    }


    private ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> getDmEventsWithHttpInfo(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDmEventsAsync(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsWithParticipantIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDmEventsRequestBuilder {
        private final String participantId;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;

        private GetDmEventsRequestBuilder(String participantId) {
            this.participantId = participantId;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }
        
        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetDmEventsRequestBuilder
         */
        public GetDmEventsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getDmEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDmEventsCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }


        /**
         * Execute getDmEvents request
         * @return Get2DmConversationsWithParticipantIdDmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmConversationsWithParticipantIdDmEventsResponse execute() throws ApiException {
            ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> localVarResp = getDmEventsWithHttpInfo(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDmEvents request with HTTP info returned
         * @return ApiResponse&lt;Get2DmConversationsWithParticipantIdDmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> executeWithHttpInfo() throws ApiException {
            return getDmEventsWithHttpInfo(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        }

        /**
         * Execute getDmEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmConversationsWithParticipantIdDmEventsResponse> _callback) throws ApiException {
            return getDmEventsAsync(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @return GetDmEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public GetDmEventsRequestBuilder getDmEvents(String participantId) throws IllegalArgumentException {
        if (participantId == null) throw new IllegalArgumentException("\"participantId\" is required but got null");
            

        return new GetDmEventsRequestBuilder(participantId);
    }
    private okhttp3.Call getDmEvents_0Call(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{id}/dm_events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmEvents_0ValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDmEvents_0(Async)");
        }

        return getDmEvents_0Call(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);

    }


    private ApiResponse<Get2DmConversationsIdDmEventsResponse> getDmEvents_0WithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmEvents_0ValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDmEvents_0Async(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmEvents_0ValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDmEvents0RequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;

        private GetDmEvents0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }
        
        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetDmEvents0RequestBuilder
         */
        public GetDmEvents0RequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getDmEvents_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDmEvents_0Call(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }


        /**
         * Execute getDmEvents_0 request
         * @return Get2DmConversationsIdDmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmConversationsIdDmEventsResponse execute() throws ApiException {
            ApiResponse<Get2DmConversationsIdDmEventsResponse> localVarResp = getDmEvents_0WithHttpInfo(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDmEvents_0 request with HTTP info returned
         * @return ApiResponse&lt;Get2DmConversationsIdDmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2DmConversationsIdDmEventsResponse> executeWithHttpInfo() throws ApiException {
            return getDmEvents_0WithHttpInfo(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        }

        /**
         * Execute getDmEvents_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmConversationsIdDmEventsResponse> _callback) throws ApiException {
            return getDmEvents_0Async(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param id The DM Conversation ID. (required)
     * @return GetDmEvents0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public GetDmEvents0RequestBuilder getDmEvents_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDmEvents0RequestBuilder(id);
    }
    private okhttp3.Call getRecentDmEventsCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentDmEventsValidateBeforeCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        return getRecentDmEventsCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);

    }


    private ApiResponse<Get2DmEventsResponse> getRecentDmEventsWithHttpInfo(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getRecentDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentDmEventsAsync(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentDmEventsRequestBuilder {
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;

        private GetRecentDmEventsRequestBuilder() {
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }
        
        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetRecentDmEventsRequestBuilder
         */
        public GetRecentDmEventsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getRecentDmEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentDmEventsCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }


        /**
         * Execute getRecentDmEvents request
         * @return Get2DmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmEventsResponse execute() throws ApiException {
            ApiResponse<Get2DmEventsResponse> localVarResp = getRecentDmEventsWithHttpInfo(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentDmEvents request with HTTP info returned
         * @return ApiResponse&lt;Get2DmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2DmEventsResponse> executeWithHttpInfo() throws ApiException {
            return getRecentDmEventsWithHttpInfo(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        }

        /**
         * Execute getRecentDmEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmEventsResponse> _callback) throws ApiException {
            return getRecentDmEventsAsync(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     * @return GetRecentDmEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentDmEventsRequestBuilder getRecentDmEvents() throws IllegalArgumentException {
        return new GetRecentDmEventsRequestBuilder();
    }
    private okhttp3.Call sendNewMessageToDmConversationCall(String dmConversationId, TACreateMessageRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{dm_conversation_id}/messages"
            .replace("{" + "dm_conversation_id" + "}", localVarApiClient.escapeString(dmConversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendNewMessageToDmConversationValidateBeforeCall(String dmConversationId, TACreateMessageRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dmConversationId' is set
        if (dmConversationId == null) {
            throw new ApiException("Missing the required parameter 'dmConversationId' when calling sendNewMessageToDmConversation(Async)");
        }

        return sendNewMessageToDmConversationCall(dmConversationId, body, _callback);

    }


    private ApiResponse<CreateDmEventResponse> sendNewMessageToDmConversationWithHttpInfo(String dmConversationId, TACreateMessageRequest body) throws ApiException {
        okhttp3.Call localVarCall = sendNewMessageToDmConversationValidateBeforeCall(dmConversationId, body, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendNewMessageToDmConversationAsync(String dmConversationId, TACreateMessageRequest body, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendNewMessageToDmConversationValidateBeforeCall(dmConversationId, body, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendNewMessageToDmConversationRequestBuilder {
        private final String dmConversationId;
        private List<CreateTextMessageRequestAttachmentsInner> attachments;
        private String text;

        private SendNewMessageToDmConversationRequestBuilder(String dmConversationId) {
            this.dmConversationId = dmConversationId;
        }

        /**
         * Set attachments
         * @param attachments Attachments to a DM Event. (optional)
         * @return SendNewMessageToDmConversationRequestBuilder
         */
        public SendNewMessageToDmConversationRequestBuilder attachments(List<CreateTextMessageRequestAttachmentsInner> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set text
         * @param text Text of the message. (optional)
         * @return SendNewMessageToDmConversationRequestBuilder
         */
        public SendNewMessageToDmConversationRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for sendNewMessageToDmConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToDmConversationCall(dmConversationId, body, _callback);
        }

        private TACreateMessageRequest buildBodyParams() {
            TACreateMessageRequest body = new TACreateMessageRequest();
            return body;
        }

        /**
         * Execute sendNewMessageToDmConversation request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            ApiResponse<CreateDmEventResponse> localVarResp = sendNewMessageToDmConversationWithHttpInfo(dmConversationId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendNewMessageToDmConversation request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToDmConversationWithHttpInfo(dmConversationId, body);
        }

        /**
         * Execute sendNewMessageToDmConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToDmConversationAsync(dmConversationId, body, _callback);
        }
    }

    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param dmConversationId The DM Conversation ID. (required)
     * @return SendNewMessageToDmConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public SendNewMessageToDmConversationRequestBuilder sendNewMessageToDmConversation(String dmConversationId) throws IllegalArgumentException {
        if (dmConversationId == null) throw new IllegalArgumentException("\"dmConversationId\" is required but got null");
            

        return new SendNewMessageToDmConversationRequestBuilder(dmConversationId);
    }
    private okhttp3.Call sendNewMessageToUserCall(String participantId, TACreateMessageRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/messages"
            .replace("{" + "participant_id" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendNewMessageToUserValidateBeforeCall(String participantId, TACreateMessageRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling sendNewMessageToUser(Async)");
        }

        return sendNewMessageToUserCall(participantId, body, _callback);

    }


    private ApiResponse<CreateDmEventResponse> sendNewMessageToUserWithHttpInfo(String participantId, TACreateMessageRequest body) throws ApiException {
        okhttp3.Call localVarCall = sendNewMessageToUserValidateBeforeCall(participantId, body, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendNewMessageToUserAsync(String participantId, TACreateMessageRequest body, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendNewMessageToUserValidateBeforeCall(participantId, body, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendNewMessageToUserRequestBuilder {
        private final String participantId;
        private List<CreateTextMessageRequestAttachmentsInner> attachments;
        private String text;

        private SendNewMessageToUserRequestBuilder(String participantId) {
            this.participantId = participantId;
        }

        /**
         * Set attachments
         * @param attachments Attachments to a DM Event. (optional)
         * @return SendNewMessageToUserRequestBuilder
         */
        public SendNewMessageToUserRequestBuilder attachments(List<CreateTextMessageRequestAttachmentsInner> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set text
         * @param text Text of the message. (optional)
         * @return SendNewMessageToUserRequestBuilder
         */
        public SendNewMessageToUserRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for sendNewMessageToUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToUserCall(participantId, body, _callback);
        }

        private TACreateMessageRequest buildBodyParams() {
            TACreateMessageRequest body = new TACreateMessageRequest();
            return body;
        }

        /**
         * Execute sendNewMessageToUser request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            ApiResponse<CreateDmEventResponse> localVarResp = sendNewMessageToUserWithHttpInfo(participantId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendNewMessageToUser request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToUserWithHttpInfo(participantId, body);
        }

        /**
         * Execute sendNewMessageToUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            TACreateMessageRequest body = buildBodyParams();
            return sendNewMessageToUserAsync(participantId, body, _callback);
        }
    }

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @return SendNewMessageToUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public SendNewMessageToUserRequestBuilder sendNewMessageToUser(String participantId) throws IllegalArgumentException {
        if (participantId == null) throw new IllegalArgumentException("\"participantId\" is required but got null");
            

        return new SendNewMessageToUserRequestBuilder(participantId);
    }
}
