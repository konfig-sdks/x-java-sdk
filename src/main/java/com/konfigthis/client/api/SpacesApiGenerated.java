/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2SpacesByCreatorIdsResponse;
import com.konfigthis.client.model.Get2SpacesIdBuyersResponse;
import com.konfigthis.client.model.Get2SpacesIdResponse;
import com.konfigthis.client.model.Get2SpacesIdTweetsResponse;
import com.konfigthis.client.model.Get2SpacesResponse;
import com.konfigthis.client.model.Get2SpacesSearchResponse;
import com.konfigthis.client.model.Problem;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SpacesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpacesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SpacesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call findMatchingSpacesCall(String query, String state, Integer maxResults, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (spaceFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "space.fields", spaceFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (topicFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "topic.fields", topicFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findMatchingSpacesValidateBeforeCall(String query, String state, Integer maxResults, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling findMatchingSpaces(Async)");
        }

        return findMatchingSpacesCall(query, state, maxResults, spaceFields, expansions, userFields, topicFields, _callback);

    }


    private ApiResponse<Get2SpacesSearchResponse> findMatchingSpacesWithHttpInfo(String query, String state, Integer maxResults, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields) throws ApiException {
        okhttp3.Call localVarCall = findMatchingSpacesValidateBeforeCall(query, state, maxResults, spaceFields, expansions, userFields, topicFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findMatchingSpacesAsync(String query, String state, Integer maxResults, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback<Get2SpacesSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = findMatchingSpacesValidateBeforeCall(query, state, maxResults, spaceFields, expansions, userFields, topicFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindMatchingSpacesRequestBuilder {
        private final String query;
        private String state;
        private Integer maxResults;
        private Set<String> spaceFields;
        private Set<String> expansions;
        private Set<String> userFields;
        private Set<String> topicFields;

        private FindMatchingSpacesRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set state
         * @param state The state of Spaces to search for. (optional, default to all)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The number of results to return. (optional, default to 100)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set spaceFields
         * @param spaceFields A comma separated list of Space fields to display. (optional)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder spaceFields(Set<String> spaceFields) {
            this.spaceFields = spaceFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set topicFields
         * @param topicFields A comma separated list of Topic fields to display. (optional)
         * @return FindMatchingSpacesRequestBuilder
         */
        public FindMatchingSpacesRequestBuilder topicFields(Set<String> topicFields) {
            this.topicFields = topicFields;
            return this;
        }
        
        /**
         * Build call for findMatchingSpaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findMatchingSpacesCall(query, state, maxResults, spaceFields, expansions, userFields, topicFields, _callback);
        }


        /**
         * Execute findMatchingSpaces request
         * @return Get2SpacesSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesSearchResponse execute() throws ApiException {
            ApiResponse<Get2SpacesSearchResponse> localVarResp = findMatchingSpacesWithHttpInfo(query, state, maxResults, spaceFields, expansions, userFields, topicFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findMatchingSpaces request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesSearchResponse> executeWithHttpInfo() throws ApiException {
            return findMatchingSpacesWithHttpInfo(query, state, maxResults, spaceFields, expansions, userFields, topicFields);
        }

        /**
         * Execute findMatchingSpaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesSearchResponse> _callback) throws ApiException {
            return findMatchingSpacesAsync(query, state, maxResults, spaceFields, expansions, userFields, topicFields, _callback);
        }
    }

    /**
     * Search for Spaces
     * Returns Spaces that match the provided query.
     * @param query The search query. (required)
     * @return FindMatchingSpacesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search">Search for Spaces Documentation</a>
     */
    public FindMatchingSpacesRequestBuilder findMatchingSpaces(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            if (query != null && query.length() < 1) {
              throw new IllegalArgumentException("Invalid value for query. Length must be greater than or equal to 1.");
            }

        return new FindMatchingSpacesRequestBuilder(query);
    }
    private okhttp3.Call getBuyersListCall(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/{id}/buyers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuyersListValidateBeforeCall(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBuyersList(Async)");
        }

        return getBuyersListCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2SpacesIdBuyersResponse> getBuyersListWithHttpInfo(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getBuyersListValidateBeforeCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesIdBuyersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBuyersListAsync(String id, String paginationToken, Integer maxResults, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2SpacesIdBuyersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuyersListValidateBeforeCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesIdBuyersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBuyersListRequestBuilder {
        private final String id;
        private String paginationToken;
        private Integer maxResults;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetBuyersListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetBuyersListRequestBuilder
         */
        public GetBuyersListRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getBuyersList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBuyersListCall(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getBuyersList request
         * @return Get2SpacesIdBuyersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesIdBuyersResponse execute() throws ApiException {
            ApiResponse<Get2SpacesIdBuyersResponse> localVarResp = getBuyersListWithHttpInfo(id, paginationToken, maxResults, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBuyersList request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesIdBuyersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesIdBuyersResponse> executeWithHttpInfo() throws ApiException {
            return getBuyersListWithHttpInfo(id, paginationToken, maxResults, userFields, expansions, tweetFields);
        }

        /**
         * Execute getBuyersList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesIdBuyersResponse> _callback) throws ApiException {
            return getBuyersListAsync(id, paginationToken, maxResults, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     * Retrieves the list of Users who purchased a ticket to the given space
     * @param id The ID of the Space to be retrieved. (required)
     * @return GetBuyersListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers">Retrieve the list of Users who purchased a ticket to the given space Documentation</a>
     */
    public GetBuyersListRequestBuilder getBuyersList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetBuyersListRequestBuilder(id);
    }
    private okhttp3.Call getTweetsCall(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/{id}/tweets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (pollFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "poll.fields", pollFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (placeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "place.fields", placeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTweetsValidateBeforeCall(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTweets(Async)");
        }

        return getTweetsCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);

    }


    private ApiResponse<Get2SpacesIdTweetsResponse> getTweetsWithHttpInfo(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields) throws ApiException {
        okhttp3.Call localVarCall = getTweetsValidateBeforeCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesIdTweetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTweetsAsync(String id, Integer maxResults, Set<String> tweetFields, Set<String> expansions, Set<String> mediaFields, Set<String> pollFields, Set<String> userFields, Set<String> placeFields, final ApiCallback<Get2SpacesIdTweetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTweetsValidateBeforeCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesIdTweetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTweetsRequestBuilder {
        private final String id;
        private Integer maxResults;
        private Set<String> tweetFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> pollFields;
        private Set<String> userFields;
        private Set<String> placeFields;

        private GetTweetsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }
        
        /**
         * Set pollFields
         * @param pollFields A comma separated list of Poll fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder pollFields(Set<String> pollFields) {
            this.pollFields = pollFields;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set placeFields
         * @param placeFields A comma separated list of Place fields to display. (optional)
         * @return GetTweetsRequestBuilder
         */
        public GetTweetsRequestBuilder placeFields(Set<String> placeFields) {
            this.placeFields = placeFields;
            return this;
        }
        
        /**
         * Build call for getTweets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTweetsCall(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }


        /**
         * Execute getTweets request
         * @return Get2SpacesIdTweetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesIdTweetsResponse execute() throws ApiException {
            ApiResponse<Get2SpacesIdTweetsResponse> localVarResp = getTweetsWithHttpInfo(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTweets request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesIdTweetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesIdTweetsResponse> executeWithHttpInfo() throws ApiException {
            return getTweetsWithHttpInfo(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        }

        /**
         * Execute getTweets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesIdTweetsResponse> _callback) throws ApiException {
            return getTweetsAsync(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, _callback);
        }
    }

    /**
     * Retrieve Tweets from a Space.
     * Retrieves Tweets shared in the specified Space.
     * @param id The ID of the Space to be retrieved. (required)
     * @return GetTweetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-tweets">Retrieve Tweets from a Space. Documentation</a>
     */
    public GetTweetsRequestBuilder getTweets(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTweetsRequestBuilder(id);
    }
    private okhttp3.Call lookupByCreatorIdsCall(List<String> userIds, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/by/creator_ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "user_ids", userIds));
        }

        if (spaceFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "space.fields", spaceFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (topicFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "topic.fields", topicFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByCreatorIdsValidateBeforeCall(List<String> userIds, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling lookupByCreatorIds(Async)");
        }

        return lookupByCreatorIdsCall(userIds, spaceFields, expansions, userFields, topicFields, _callback);

    }


    private ApiResponse<Get2SpacesByCreatorIdsResponse> lookupByCreatorIdsWithHttpInfo(List<String> userIds, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByCreatorIdsValidateBeforeCall(userIds, spaceFields, expansions, userFields, topicFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesByCreatorIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByCreatorIdsAsync(List<String> userIds, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback<Get2SpacesByCreatorIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByCreatorIdsValidateBeforeCall(userIds, spaceFields, expansions, userFields, topicFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesByCreatorIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByCreatorIdsRequestBuilder {
        private final List<String> userIds;
        private Set<String> spaceFields;
        private Set<String> expansions;
        private Set<String> userFields;
        private Set<String> topicFields;

        private LookupByCreatorIdsRequestBuilder(List<String> userIds) {
            this.userIds = userIds;
        }

        /**
         * Set spaceFields
         * @param spaceFields A comma separated list of Space fields to display. (optional)
         * @return LookupByCreatorIdsRequestBuilder
         */
        public LookupByCreatorIdsRequestBuilder spaceFields(Set<String> spaceFields) {
            this.spaceFields = spaceFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByCreatorIdsRequestBuilder
         */
        public LookupByCreatorIdsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByCreatorIdsRequestBuilder
         */
        public LookupByCreatorIdsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set topicFields
         * @param topicFields A comma separated list of Topic fields to display. (optional)
         * @return LookupByCreatorIdsRequestBuilder
         */
        public LookupByCreatorIdsRequestBuilder topicFields(Set<String> topicFields) {
            this.topicFields = topicFields;
            return this;
        }
        
        /**
         * Build call for lookupByCreatorIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByCreatorIdsCall(userIds, spaceFields, expansions, userFields, topicFields, _callback);
        }


        /**
         * Execute lookupByCreatorIds request
         * @return Get2SpacesByCreatorIdsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesByCreatorIdsResponse execute() throws ApiException {
            ApiResponse<Get2SpacesByCreatorIdsResponse> localVarResp = lookupByCreatorIdsWithHttpInfo(userIds, spaceFields, expansions, userFields, topicFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByCreatorIds request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesByCreatorIdsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesByCreatorIdsResponse> executeWithHttpInfo() throws ApiException {
            return lookupByCreatorIdsWithHttpInfo(userIds, spaceFields, expansions, userFields, topicFields);
        }

        /**
         * Execute lookupByCreatorIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesByCreatorIdsResponse> _callback) throws ApiException {
            return lookupByCreatorIdsAsync(userIds, spaceFields, expansions, userFields, topicFields, _callback);
        }
    }

    /**
     * Space lookup by their creators
     * Returns a variety of information about the Spaces created by the provided User IDs
     * @param userIds The IDs of Users to search through. (required)
     * @return LookupByCreatorIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids">Space lookup by their creators Documentation</a>
     */
    public LookupByCreatorIdsRequestBuilder lookupByCreatorIds(List<String> userIds) throws IllegalArgumentException {
        if (userIds == null) throw new IllegalArgumentException("\"userIds\" is required but got null");
        return new LookupByCreatorIdsRequestBuilder(userIds);
    }
    private okhttp3.Call lookupSpaceByIdCall(String id, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (spaceFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "space.fields", spaceFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (topicFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "topic.fields", topicFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupSpaceByIdValidateBeforeCall(String id, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lookupSpaceById(Async)");
        }

        return lookupSpaceByIdCall(id, spaceFields, expansions, userFields, topicFields, _callback);

    }


    private ApiResponse<Get2SpacesIdResponse> lookupSpaceByIdWithHttpInfo(String id, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields) throws ApiException {
        okhttp3.Call localVarCall = lookupSpaceByIdValidateBeforeCall(id, spaceFields, expansions, userFields, topicFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupSpaceByIdAsync(String id, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback<Get2SpacesIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupSpaceByIdValidateBeforeCall(id, spaceFields, expansions, userFields, topicFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupSpaceByIdRequestBuilder {
        private final String id;
        private Set<String> spaceFields;
        private Set<String> expansions;
        private Set<String> userFields;
        private Set<String> topicFields;

        private LookupSpaceByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set spaceFields
         * @param spaceFields A comma separated list of Space fields to display. (optional)
         * @return LookupSpaceByIdRequestBuilder
         */
        public LookupSpaceByIdRequestBuilder spaceFields(Set<String> spaceFields) {
            this.spaceFields = spaceFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupSpaceByIdRequestBuilder
         */
        public LookupSpaceByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupSpaceByIdRequestBuilder
         */
        public LookupSpaceByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set topicFields
         * @param topicFields A comma separated list of Topic fields to display. (optional)
         * @return LookupSpaceByIdRequestBuilder
         */
        public LookupSpaceByIdRequestBuilder topicFields(Set<String> topicFields) {
            this.topicFields = topicFields;
            return this;
        }
        
        /**
         * Build call for lookupSpaceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupSpaceByIdCall(id, spaceFields, expansions, userFields, topicFields, _callback);
        }


        /**
         * Execute lookupSpaceById request
         * @return Get2SpacesIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesIdResponse execute() throws ApiException {
            ApiResponse<Get2SpacesIdResponse> localVarResp = lookupSpaceByIdWithHttpInfo(id, spaceFields, expansions, userFields, topicFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupSpaceById request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesIdResponse> executeWithHttpInfo() throws ApiException {
            return lookupSpaceByIdWithHttpInfo(id, spaceFields, expansions, userFields, topicFields);
        }

        /**
         * Execute lookupSpaceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesIdResponse> _callback) throws ApiException {
            return lookupSpaceByIdAsync(id, spaceFields, expansions, userFields, topicFields, _callback);
        }
    }

    /**
     * Space lookup by Space ID
     * Returns a variety of information about the Space specified by the requested ID
     * @param id The ID of the Space to be retrieved. (required)
     * @return LookupSpaceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id">Space lookup by Space ID Documentation</a>
     */
    public LookupSpaceByIdRequestBuilder lookupSpaceById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LookupSpaceByIdRequestBuilder(id);
    }
    private okhttp3.Call lookupSpaceIdsCall(List<String> ids, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (spaceFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "space.fields", spaceFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (topicFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "topic.fields", topicFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupSpaceIdsValidateBeforeCall(List<String> ids, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lookupSpaceIds(Async)");
        }

        return lookupSpaceIdsCall(ids, spaceFields, expansions, userFields, topicFields, _callback);

    }


    private ApiResponse<Get2SpacesResponse> lookupSpaceIdsWithHttpInfo(List<String> ids, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields) throws ApiException {
        okhttp3.Call localVarCall = lookupSpaceIdsValidateBeforeCall(ids, spaceFields, expansions, userFields, topicFields, null);
        Type localVarReturnType = new TypeToken<Get2SpacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupSpaceIdsAsync(List<String> ids, Set<String> spaceFields, Set<String> expansions, Set<String> userFields, Set<String> topicFields, final ApiCallback<Get2SpacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupSpaceIdsValidateBeforeCall(ids, spaceFields, expansions, userFields, topicFields, _callback);
        Type localVarReturnType = new TypeToken<Get2SpacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupSpaceIdsRequestBuilder {
        private final List<String> ids;
        private Set<String> spaceFields;
        private Set<String> expansions;
        private Set<String> userFields;
        private Set<String> topicFields;

        private LookupSpaceIdsRequestBuilder(List<String> ids) {
            this.ids = ids;
        }

        /**
         * Set spaceFields
         * @param spaceFields A comma separated list of Space fields to display. (optional)
         * @return LookupSpaceIdsRequestBuilder
         */
        public LookupSpaceIdsRequestBuilder spaceFields(Set<String> spaceFields) {
            this.spaceFields = spaceFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupSpaceIdsRequestBuilder
         */
        public LookupSpaceIdsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupSpaceIdsRequestBuilder
         */
        public LookupSpaceIdsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set topicFields
         * @param topicFields A comma separated list of Topic fields to display. (optional)
         * @return LookupSpaceIdsRequestBuilder
         */
        public LookupSpaceIdsRequestBuilder topicFields(Set<String> topicFields) {
            this.topicFields = topicFields;
            return this;
        }
        
        /**
         * Build call for lookupSpaceIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupSpaceIdsCall(ids, spaceFields, expansions, userFields, topicFields, _callback);
        }


        /**
         * Execute lookupSpaceIds request
         * @return Get2SpacesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2SpacesResponse execute() throws ApiException {
            ApiResponse<Get2SpacesResponse> localVarResp = lookupSpaceIdsWithHttpInfo(ids, spaceFields, expansions, userFields, topicFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupSpaceIds request with HTTP info returned
         * @return ApiResponse&lt;Get2SpacesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2SpacesResponse> executeWithHttpInfo() throws ApiException {
            return lookupSpaceIdsWithHttpInfo(ids, spaceFields, expansions, userFields, topicFields);
        }

        /**
         * Execute lookupSpaceIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2SpacesResponse> _callback) throws ApiException {
            return lookupSpaceIdsAsync(ids, spaceFields, expansions, userFields, topicFields, _callback);
        }
    }

    /**
     * Space lookup up Space IDs
     * Returns a variety of information about the Spaces specified by the requested IDs
     * @param ids The list of Space IDs to return. (required)
     * @return LookupSpaceIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces">Space lookup up Space IDs Documentation</a>
     */
    public LookupSpaceIdsRequestBuilder lookupSpaceIds(List<String> ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        return new LookupSpaceIdsRequestBuilder(ids);
    }
}
