/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BlockUserMutationResponse;
import com.konfigthis.client.model.BlockUserRequest;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2ListsIdFollowersResponse;
import com.konfigthis.client.model.Get2ListsIdMembersResponse;
import com.konfigthis.client.model.Get2TweetsIdLikingUsersResponse;
import com.konfigthis.client.model.Get2TweetsIdRetweetedByResponse;
import com.konfigthis.client.model.Get2UsersByResponse;
import com.konfigthis.client.model.Get2UsersByUsernameUsernameResponse;
import com.konfigthis.client.model.Get2UsersIdBlockingResponse;
import com.konfigthis.client.model.Get2UsersIdFollowersResponse;
import com.konfigthis.client.model.Get2UsersIdFollowingResponse;
import com.konfigthis.client.model.Get2UsersIdMutingResponse;
import com.konfigthis.client.model.Get2UsersIdResponse;
import com.konfigthis.client.model.Get2UsersMeResponse;
import com.konfigthis.client.model.Get2UsersResponse;
import com.konfigthis.client.model.MuteUserMutationResponse;
import com.konfigthis.client.model.MuteUserRequest;
import com.konfigthis.client.model.Problem;
import java.util.Set;
import com.konfigthis.client.model.UsersFollowingCreateRequest;
import com.konfigthis.client.model.UsersFollowingCreateResponse;
import com.konfigthis.client.model.UsersFollowingDeleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call blockUserByIdCall(String id, BlockUserRequest blockUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockUserRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/blocking"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockUserByIdValidateBeforeCall(String id, BlockUserRequest blockUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling blockUserById(Async)");
        }

        // verify the required parameter 'blockUserRequest' is set
        if (blockUserRequest == null) {
            throw new ApiException("Missing the required parameter 'blockUserRequest' when calling blockUserById(Async)");
        }

        return blockUserByIdCall(id, blockUserRequest, _callback);

    }


    private ApiResponse<BlockUserMutationResponse> blockUserByIdWithHttpInfo(String id, BlockUserRequest blockUserRequest) throws ApiException {
        okhttp3.Call localVarCall = blockUserByIdValidateBeforeCall(id, blockUserRequest, null);
        Type localVarReturnType = new TypeToken<BlockUserMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call blockUserByIdAsync(String id, BlockUserRequest blockUserRequest, final ApiCallback<BlockUserMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockUserByIdValidateBeforeCall(id, blockUserRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockUserMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BlockUserByIdRequestBuilder {
        private final String targetUserId;
        private final String id;

        private BlockUserByIdRequestBuilder(String targetUserId, String id) {
            this.targetUserId = targetUserId;
            this.id = id;
        }

        /**
         * Build call for blockUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BlockUserRequest blockUserRequest = buildBodyParams();
            return blockUserByIdCall(id, blockUserRequest, _callback);
        }

        private BlockUserRequest buildBodyParams() {
            BlockUserRequest blockUserRequest = new BlockUserRequest();
            blockUserRequest.targetUserId(this.targetUserId);
            return blockUserRequest;
        }

        /**
         * Execute blockUserById request
         * @return BlockUserMutationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public BlockUserMutationResponse execute() throws ApiException {
            BlockUserRequest blockUserRequest = buildBodyParams();
            ApiResponse<BlockUserMutationResponse> localVarResp = blockUserByIdWithHttpInfo(id, blockUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute blockUserById request with HTTP info returned
         * @return ApiResponse&lt;BlockUserMutationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockUserMutationResponse> executeWithHttpInfo() throws ApiException {
            BlockUserRequest blockUserRequest = buildBodyParams();
            return blockUserByIdWithHttpInfo(id, blockUserRequest);
        }

        /**
         * Execute blockUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockUserMutationResponse> _callback) throws ApiException {
            BlockUserRequest blockUserRequest = buildBodyParams();
            return blockUserByIdAsync(id, blockUserRequest, _callback);
        }
    }

    /**
     * Block User by User ID
     * Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
     * @param id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param blockUserRequest  (required)
     * @return BlockUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking">Block User by User ID Documentation</a>
     */
    public BlockUserByIdRequestBuilder blockUserById(String targetUserId, String id) throws IllegalArgumentException {
        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new BlockUserByIdRequestBuilder(targetUserId, id);
    }
    private okhttp3.Call followUserCall(String id, UsersFollowingCreateRequest usersFollowingCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersFollowingCreateRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/following"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUserValidateBeforeCall(String id, UsersFollowingCreateRequest usersFollowingCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling followUser(Async)");
        }

        return followUserCall(id, usersFollowingCreateRequest, _callback);

    }


    private ApiResponse<UsersFollowingCreateResponse> followUserWithHttpInfo(String id, UsersFollowingCreateRequest usersFollowingCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = followUserValidateBeforeCall(id, usersFollowingCreateRequest, null);
        Type localVarReturnType = new TypeToken<UsersFollowingCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call followUserAsync(String id, UsersFollowingCreateRequest usersFollowingCreateRequest, final ApiCallback<UsersFollowingCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUserValidateBeforeCall(id, usersFollowingCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersFollowingCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FollowUserRequestBuilder {
        private final String targetUserId;
        private final String id;

        private FollowUserRequestBuilder(String targetUserId, String id) {
            this.targetUserId = targetUserId;
            this.id = id;
        }

        /**
         * Build call for followUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersFollowingCreateRequest usersFollowingCreateRequest = buildBodyParams();
            return followUserCall(id, usersFollowingCreateRequest, _callback);
        }

        private UsersFollowingCreateRequest buildBodyParams() {
            UsersFollowingCreateRequest usersFollowingCreateRequest = new UsersFollowingCreateRequest();
            usersFollowingCreateRequest.targetUserId(this.targetUserId);
            return usersFollowingCreateRequest;
        }

        /**
         * Execute followUser request
         * @return UsersFollowingCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersFollowingCreateResponse execute() throws ApiException {
            UsersFollowingCreateRequest usersFollowingCreateRequest = buildBodyParams();
            ApiResponse<UsersFollowingCreateResponse> localVarResp = followUserWithHttpInfo(id, usersFollowingCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute followUser request with HTTP info returned
         * @return ApiResponse&lt;UsersFollowingCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersFollowingCreateResponse> executeWithHttpInfo() throws ApiException {
            UsersFollowingCreateRequest usersFollowingCreateRequest = buildBodyParams();
            return followUserWithHttpInfo(id, usersFollowingCreateRequest);
        }

        /**
         * Execute followUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersFollowingCreateResponse> _callback) throws ApiException {
            UsersFollowingCreateRequest usersFollowingCreateRequest = buildBodyParams();
            return followUserAsync(id, usersFollowingCreateRequest, _callback);
        }
    }

    /**
     * Follow User
     * Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
     * @param id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @return FollowUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following">Follow User Documentation</a>
     */
    public FollowUserRequestBuilder followUser(String targetUserId, String id) throws IllegalArgumentException {
        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new FollowUserRequestBuilder(targetUserId, id);
    }
    private okhttp3.Call getBlockedUsersCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/blocking"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockedUsersValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBlockedUsers(Async)");
        }

        return getBlockedUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersIdBlockingResponse> getBlockedUsersWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getBlockedUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdBlockingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBlockedUsersAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersIdBlockingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockedUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdBlockingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBlockedUsersRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetBlockedUsersRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetBlockedUsersRequestBuilder
         */
        public GetBlockedUsersRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetBlockedUsersRequestBuilder
         */
        public GetBlockedUsersRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetBlockedUsersRequestBuilder
         */
        public GetBlockedUsersRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetBlockedUsersRequestBuilder
         */
        public GetBlockedUsersRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetBlockedUsersRequestBuilder
         */
        public GetBlockedUsersRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getBlockedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBlockedUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getBlockedUsers request
         * @return Get2UsersIdBlockingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdBlockingResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdBlockingResponse> localVarResp = getBlockedUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBlockedUsers request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdBlockingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdBlockingResponse> executeWithHttpInfo() throws ApiException {
            return getBlockedUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getBlockedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdBlockingResponse> _callback) throws ApiException {
            return getBlockedUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that are blocked by provided User ID
     * Returns a list of Users that are blocked by the provided User ID
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @return GetBlockedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking">Returns User objects that are blocked by provided User ID Documentation</a>
     */
    public GetBlockedUsersRequestBuilder getBlockedUsers(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetBlockedUsersRequestBuilder(id);
    }
    private okhttp3.Call getFollowersByIdCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/followers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersByIdValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFollowersById(Async)");
        }

        return getFollowersByIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersIdFollowersResponse> getFollowersByIdWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getFollowersByIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowersByIdAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersIdFollowersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersByIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowersByIdRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetFollowersByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetFollowersByIdRequestBuilder
         */
        public GetFollowersByIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetFollowersByIdRequestBuilder
         */
        public GetFollowersByIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFollowersByIdRequestBuilder
         */
        public GetFollowersByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFollowersByIdRequestBuilder
         */
        public GetFollowersByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetFollowersByIdRequestBuilder
         */
        public GetFollowersByIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getFollowersById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowersByIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getFollowersById request
         * @return Get2UsersIdFollowersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdFollowersResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdFollowersResponse> localVarResp = getFollowersByIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowersById request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdFollowersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdFollowersResponse> executeWithHttpInfo() throws ApiException {
            return getFollowersByIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getFollowersById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdFollowersResponse> _callback) throws ApiException {
            return getFollowersByIdAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Followers by User ID
     * Returns a list of Users who are followers of the specified User ID.
     * @param id The ID of the User to lookup. (required)
     * @return GetFollowersByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-followers">Followers by User ID Documentation</a>
     */
    public GetFollowersByIdRequestBuilder getFollowersById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFollowersByIdRequestBuilder(id);
    }
    private okhttp3.Call getFollowersByListIdCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}/followers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersByListIdValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFollowersByListId(Async)");
        }

        return getFollowersByListIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2ListsIdFollowersResponse> getFollowersByListIdWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getFollowersByListIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2ListsIdFollowersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowersByListIdAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2ListsIdFollowersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersByListIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ListsIdFollowersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowersByListIdRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetFollowersByListIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetFollowersByListIdRequestBuilder
         */
        public GetFollowersByListIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetFollowersByListIdRequestBuilder
         */
        public GetFollowersByListIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFollowersByListIdRequestBuilder
         */
        public GetFollowersByListIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFollowersByListIdRequestBuilder
         */
        public GetFollowersByListIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetFollowersByListIdRequestBuilder
         */
        public GetFollowersByListIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getFollowersByListId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowersByListIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getFollowersByListId request
         * @return Get2ListsIdFollowersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ListsIdFollowersResponse execute() throws ApiException {
            ApiResponse<Get2ListsIdFollowersResponse> localVarResp = getFollowersByListIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowersByListId request with HTTP info returned
         * @return ApiResponse&lt;Get2ListsIdFollowersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ListsIdFollowersResponse> executeWithHttpInfo() throws ApiException {
            return getFollowersByListIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getFollowersByListId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ListsIdFollowersResponse> _callback) throws ApiException {
            return getFollowersByListIdAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that follow a List by the provided List ID
     * Returns a list of Users that follow a List by the provided List ID
     * @param id The ID of the List. (required)
     * @return GetFollowersByListIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-followers">Returns User objects that follow a List by the provided List ID Documentation</a>
     */
    public GetFollowersByListIdRequestBuilder getFollowersByListId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFollowersByListIdRequestBuilder(id);
    }
    private okhttp3.Call getFollowingUsersCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/following"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowingUsersValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFollowingUsers(Async)");
        }

        return getFollowingUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersIdFollowingResponse> getFollowingUsersWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getFollowingUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowingUsersAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersIdFollowingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowingUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdFollowingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowingUsersRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetFollowingUsersRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional)
         * @return GetFollowingUsersRequestBuilder
         */
        public GetFollowingUsersRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetFollowingUsersRequestBuilder
         */
        public GetFollowingUsersRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetFollowingUsersRequestBuilder
         */
        public GetFollowingUsersRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetFollowingUsersRequestBuilder
         */
        public GetFollowingUsersRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetFollowingUsersRequestBuilder
         */
        public GetFollowingUsersRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getFollowingUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowingUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getFollowingUsers request
         * @return Get2UsersIdFollowingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdFollowingResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdFollowingResponse> localVarResp = getFollowingUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowingUsers request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdFollowingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdFollowingResponse> executeWithHttpInfo() throws ApiException {
            return getFollowingUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getFollowingUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdFollowingResponse> _callback) throws ApiException {
            return getFollowingUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Following by User ID
     * Returns a list of Users that are being followed by the provided User ID
     * @param id The ID of the User to lookup. (required)
     * @return GetFollowingUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-following">Following by User ID Documentation</a>
     */
    public GetFollowingUsersRequestBuilder getFollowingUsers(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFollowingUsersRequestBuilder(id);
    }
    private okhttp3.Call getMembersByListIdCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/lists/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByListIdValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMembersByListId(Async)");
        }

        return getMembersByListIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2ListsIdMembersResponse> getMembersByListIdWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getMembersByListIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2ListsIdMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembersByListIdAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2ListsIdMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByListIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2ListsIdMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMembersByListIdRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetMembersByListIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetMembersByListIdRequestBuilder
         */
        public GetMembersByListIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return GetMembersByListIdRequestBuilder
         */
        public GetMembersByListIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetMembersByListIdRequestBuilder
         */
        public GetMembersByListIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetMembersByListIdRequestBuilder
         */
        public GetMembersByListIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetMembersByListIdRequestBuilder
         */
        public GetMembersByListIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getMembersByListId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersByListIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getMembersByListId request
         * @return Get2ListsIdMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2ListsIdMembersResponse execute() throws ApiException {
            ApiResponse<Get2ListsIdMembersResponse> localVarResp = getMembersByListIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMembersByListId request with HTTP info returned
         * @return ApiResponse&lt;Get2ListsIdMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2ListsIdMembersResponse> executeWithHttpInfo() throws ApiException {
            return getMembersByListIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getMembersByListId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2ListsIdMembersResponse> _callback) throws ApiException {
            return getMembersByListIdAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that are members of a List by the provided List ID.
     * Returns a list of Users that are members of a List by the provided List ID.
     * @param id The ID of the List. (required)
     * @return GetMembersByListIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships">Returns User objects that are members of a List by the provided List ID. Documentation</a>
     */
    public GetMembersByListIdRequestBuilder getMembersByListId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetMembersByListIdRequestBuilder(id);
    }
    private okhttp3.Call getMutedUsersByIdCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}/muting"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMutedUsersByIdValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMutedUsersById(Async)");
        }

        return getMutedUsersByIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersIdMutingResponse> getMutedUsersByIdWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getMutedUsersByIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdMutingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMutedUsersByIdAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersIdMutingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMutedUsersByIdValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdMutingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMutedUsersByIdRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetMutedUsersByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetMutedUsersByIdRequestBuilder
         */
        public GetMutedUsersByIdRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return GetMutedUsersByIdRequestBuilder
         */
        public GetMutedUsersByIdRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetMutedUsersByIdRequestBuilder
         */
        public GetMutedUsersByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetMutedUsersByIdRequestBuilder
         */
        public GetMutedUsersByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetMutedUsersByIdRequestBuilder
         */
        public GetMutedUsersByIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getMutedUsersById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMutedUsersByIdCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getMutedUsersById request
         * @return Get2UsersIdMutingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdMutingResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdMutingResponse> localVarResp = getMutedUsersByIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMutedUsersById request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdMutingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdMutingResponse> executeWithHttpInfo() throws ApiException {
            return getMutedUsersByIdWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getMutedUsersById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdMutingResponse> _callback) throws ApiException {
            return getMutedUsersByIdAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that are muted by the provided User ID
     * Returns a list of Users that are muted by the provided User ID
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @return GetMutedUsersByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting">Returns User objects that are muted by the provided User ID Documentation</a>
     */
    public GetMutedUsersByIdRequestBuilder getMutedUsersById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetMutedUsersByIdRequestBuilder(id);
    }
    private okhttp3.Call getRetweetedByTweetIdUsersCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/{id}/retweeted_by"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetweetedByTweetIdUsersValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRetweetedByTweetIdUsers(Async)");
        }

        return getRetweetedByTweetIdUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2TweetsIdRetweetedByResponse> getRetweetedByTweetIdUsersWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getRetweetedByTweetIdUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsIdRetweetedByResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRetweetedByTweetIdUsersAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2TweetsIdRetweetedByResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetweetedByTweetIdUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsIdRetweetedByResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRetweetedByTweetIdUsersRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private GetRetweetedByTweetIdUsersRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return GetRetweetedByTweetIdUsersRequestBuilder
         */
        public GetRetweetedByTweetIdUsersRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return GetRetweetedByTweetIdUsersRequestBuilder
         */
        public GetRetweetedByTweetIdUsersRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return GetRetweetedByTweetIdUsersRequestBuilder
         */
        public GetRetweetedByTweetIdUsersRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return GetRetweetedByTweetIdUsersRequestBuilder
         */
        public GetRetweetedByTweetIdUsersRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return GetRetweetedByTweetIdUsersRequestBuilder
         */
        public GetRetweetedByTweetIdUsersRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for getRetweetedByTweetIdUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRetweetedByTweetIdUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute getRetweetedByTweetIdUsers request
         * @return Get2TweetsIdRetweetedByResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsIdRetweetedByResponse execute() throws ApiException {
            ApiResponse<Get2TweetsIdRetweetedByResponse> localVarResp = getRetweetedByTweetIdUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRetweetedByTweetIdUsers request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsIdRetweetedByResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsIdRetweetedByResponse> executeWithHttpInfo() throws ApiException {
            return getRetweetedByTweetIdUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute getRetweetedByTweetIdUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsIdRetweetedByResponse> _callback) throws ApiException {
            return getRetweetedByTweetIdUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that have retweeted the provided Tweet ID
     * Returns a list of Users that have retweeted the provided Tweet ID
     * @param id A single Tweet ID. (required)
     * @return GetRetweetedByTweetIdUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by">Returns User objects that have retweeted the provided Tweet ID Documentation</a>
     */
    public GetRetweetedByTweetIdUsersRequestBuilder getRetweetedByTweetIdUsers(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRetweetedByTweetIdUsersRequestBuilder(id);
    }
    private okhttp3.Call listLikingUsersCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/tweets/{id}/liking_users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLikingUsersValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listLikingUsers(Async)");
        }

        return listLikingUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2TweetsIdLikingUsersResponse> listLikingUsersWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = listLikingUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2TweetsIdLikingUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLikingUsersAsync(String id, Integer maxResults, String paginationToken, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2TweetsIdLikingUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLikingUsersValidateBeforeCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2TweetsIdLikingUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLikingUsersRequestBuilder {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private ListLikingUsersRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return ListLikingUsersRequestBuilder
         */
        public ListLikingUsersRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
         * @return ListLikingUsersRequestBuilder
         */
        public ListLikingUsersRequestBuilder paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }
        
        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return ListLikingUsersRequestBuilder
         */
        public ListLikingUsersRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return ListLikingUsersRequestBuilder
         */
        public ListLikingUsersRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return ListLikingUsersRequestBuilder
         */
        public ListLikingUsersRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for listLikingUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLikingUsersCall(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute listLikingUsers request
         * @return Get2TweetsIdLikingUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2TweetsIdLikingUsersResponse execute() throws ApiException {
            ApiResponse<Get2TweetsIdLikingUsersResponse> localVarResp = listLikingUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLikingUsers request with HTTP info returned
         * @return ApiResponse&lt;Get2TweetsIdLikingUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2TweetsIdLikingUsersResponse> executeWithHttpInfo() throws ApiException {
            return listLikingUsersWithHttpInfo(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        }

        /**
         * Execute listLikingUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2TweetsIdLikingUsersResponse> _callback) throws ApiException {
            return listLikingUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * Returns User objects that have liked the provided Tweet ID
     * Returns a list of Users that have liked the provided Tweet ID
     * @param id A single Tweet ID. (required)
     * @return ListLikingUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users">Returns User objects that have liked the provided Tweet ID Documentation</a>
     */
    public ListLikingUsersRequestBuilder listLikingUsers(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListLikingUsersRequestBuilder(id);
    }
    private okhttp3.Call lookupByIdCall(String id, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByIdValidateBeforeCall(String id, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lookupById(Async)");
        }

        return lookupByIdCall(id, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersIdResponse> lookupByIdWithHttpInfo(String id, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByIdValidateBeforeCall(id, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByIdAsync(String id, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByIdValidateBeforeCall(id, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByIdRequestBuilder {
        private final String id;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private LookupByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByIdRequestBuilder
         */
        public LookupByIdRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for lookupById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByIdCall(id, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute lookupById request
         * @return Get2UsersIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersIdResponse execute() throws ApiException {
            ApiResponse<Get2UsersIdResponse> localVarResp = lookupByIdWithHttpInfo(id, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupById request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersIdResponse> executeWithHttpInfo() throws ApiException {
            return lookupByIdWithHttpInfo(id, userFields, expansions, tweetFields);
        }

        /**
         * Execute lookupById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersIdResponse> _callback) throws ApiException {
            return lookupByIdAsync(id, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * User lookup by ID
     * This endpoint returns information about a User. Specify User by ID.
     * @param id The ID of the User to lookup. (required)
     * @return LookupByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id">User lookup by ID Documentation</a>
     */
    public LookupByIdRequestBuilder lookupById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LookupByIdRequestBuilder(id);
    }
    private okhttp3.Call lookupByIdsCall(List<String> ids, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByIdsValidateBeforeCall(List<String> ids, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lookupByIds(Async)");
        }

        return lookupByIdsCall(ids, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersResponse> lookupByIdsWithHttpInfo(List<String> ids, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByIdsValidateBeforeCall(ids, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByIdsAsync(List<String> ids, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByIdsValidateBeforeCall(ids, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByIdsRequestBuilder {
        private final List<String> ids;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private LookupByIdsRequestBuilder(List<String> ids) {
            this.ids = ids;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByIdsRequestBuilder
         */
        public LookupByIdsRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByIdsRequestBuilder
         */
        public LookupByIdsRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByIdsRequestBuilder
         */
        public LookupByIdsRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for lookupByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByIdsCall(ids, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute lookupByIds request
         * @return Get2UsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersResponse execute() throws ApiException {
            ApiResponse<Get2UsersResponse> localVarResp = lookupByIdsWithHttpInfo(ids, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByIds request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersResponse> executeWithHttpInfo() throws ApiException {
            return lookupByIdsWithHttpInfo(ids, userFields, expansions, tweetFields);
        }

        /**
         * Execute lookupByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersResponse> _callback) throws ApiException {
            return lookupByIdsAsync(ids, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * User lookup by IDs
     * This endpoint returns information about Users. Specify Users by their ID.
     * @param ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @return LookupByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users">User lookup by IDs Documentation</a>
     */
    public LookupByIdsRequestBuilder lookupByIds(List<String> ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        return new LookupByIdsRequestBuilder(ids);
    }
    private okhttp3.Call lookupByUsernameCall(String username, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/by/username/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByUsernameValidateBeforeCall(String username, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling lookupByUsername(Async)");
        }

        return lookupByUsernameCall(username, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersByUsernameUsernameResponse> lookupByUsernameWithHttpInfo(String username, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByUsernameValidateBeforeCall(username, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersByUsernameUsernameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByUsernameAsync(String username, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersByUsernameUsernameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByUsernameValidateBeforeCall(username, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersByUsernameUsernameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByUsernameRequestBuilder {
        private final String username;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private LookupByUsernameRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByUsernameRequestBuilder
         */
        public LookupByUsernameRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByUsernameRequestBuilder
         */
        public LookupByUsernameRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByUsernameRequestBuilder
         */
        public LookupByUsernameRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for lookupByUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByUsernameCall(username, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute lookupByUsername request
         * @return Get2UsersByUsernameUsernameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersByUsernameUsernameResponse execute() throws ApiException {
            ApiResponse<Get2UsersByUsernameUsernameResponse> localVarResp = lookupByUsernameWithHttpInfo(username, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByUsername request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersByUsernameUsernameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersByUsernameUsernameResponse> executeWithHttpInfo() throws ApiException {
            return lookupByUsernameWithHttpInfo(username, userFields, expansions, tweetFields);
        }

        /**
         * Execute lookupByUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersByUsernameUsernameResponse> _callback) throws ApiException {
            return lookupByUsernameAsync(username, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * User lookup by username
     * This endpoint returns information about a User. Specify User by username.
     * @param username A username. (required)
     * @return LookupByUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username">User lookup by username Documentation</a>
     */
    public LookupByUsernameRequestBuilder lookupByUsername(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new LookupByUsernameRequestBuilder(username);
    }
    private okhttp3.Call lookupByUsernamesCall(List<String> usernames, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/by";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usernames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "usernames", usernames));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerToken", "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByUsernamesValidateBeforeCall(List<String> usernames, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usernames' is set
        if (usernames == null) {
            throw new ApiException("Missing the required parameter 'usernames' when calling lookupByUsernames(Async)");
        }

        return lookupByUsernamesCall(usernames, userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersByResponse> lookupByUsernamesWithHttpInfo(List<String> usernames, Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = lookupByUsernamesValidateBeforeCall(usernames, userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersByResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByUsernamesAsync(List<String> usernames, Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersByResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByUsernamesValidateBeforeCall(usernames, userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersByResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByUsernamesRequestBuilder {
        private final List<String> usernames;
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private LookupByUsernamesRequestBuilder(List<String> usernames) {
            this.usernames = usernames;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupByUsernamesRequestBuilder
         */
        public LookupByUsernamesRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupByUsernamesRequestBuilder
         */
        public LookupByUsernamesRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupByUsernamesRequestBuilder
         */
        public LookupByUsernamesRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for lookupByUsernames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByUsernamesCall(usernames, userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute lookupByUsernames request
         * @return Get2UsersByResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersByResponse execute() throws ApiException {
            ApiResponse<Get2UsersByResponse> localVarResp = lookupByUsernamesWithHttpInfo(usernames, userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByUsernames request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersByResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersByResponse> executeWithHttpInfo() throws ApiException {
            return lookupByUsernamesWithHttpInfo(usernames, userFields, expansions, tweetFields);
        }

        /**
         * Execute lookupByUsernames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersByResponse> _callback) throws ApiException {
            return lookupByUsernamesAsync(usernames, userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * User lookup by usernames
     * This endpoint returns information about Users. Specify Users by their username.
     * @param usernames A list of usernames, comma-separated. (required)
     * @return LookupByUsernamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by">User lookup by usernames Documentation</a>
     */
    public LookupByUsernamesRequestBuilder lookupByUsernames(List<String> usernames) throws IllegalArgumentException {
        if (usernames == null) throw new IllegalArgumentException("\"usernames\" is required but got null");
        return new LookupByUsernamesRequestBuilder(usernames);
    }
    private okhttp3.Call lookupMeCall(Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupMeValidateBeforeCall(Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        return lookupMeCall(userFields, expansions, tweetFields, _callback);

    }


    private ApiResponse<Get2UsersMeResponse> lookupMeWithHttpInfo(Set<String> userFields, Set<String> expansions, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = lookupMeValidateBeforeCall(userFields, expansions, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2UsersMeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupMeAsync(Set<String> userFields, Set<String> expansions, Set<String> tweetFields, final ApiCallback<Get2UsersMeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupMeValidateBeforeCall(userFields, expansions, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2UsersMeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupMeRequestBuilder {
        private Set<String> userFields;
        private Set<String> expansions;
        private Set<String> tweetFields;

        private LookupMeRequestBuilder() {
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return LookupMeRequestBuilder
         */
        public LookupMeRequestBuilder userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }
        
        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return LookupMeRequestBuilder
         */
        public LookupMeRequestBuilder expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }
        
        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return LookupMeRequestBuilder
         */
        public LookupMeRequestBuilder tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }
        
        /**
         * Build call for lookupMe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupMeCall(userFields, expansions, tweetFields, _callback);
        }


        /**
         * Execute lookupMe request
         * @return Get2UsersMeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2UsersMeResponse execute() throws ApiException {
            ApiResponse<Get2UsersMeResponse> localVarResp = lookupMeWithHttpInfo(userFields, expansions, tweetFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupMe request with HTTP info returned
         * @return ApiResponse&lt;Get2UsersMeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Get2UsersMeResponse> executeWithHttpInfo() throws ApiException {
            return lookupMeWithHttpInfo(userFields, expansions, tweetFields);
        }

        /**
         * Execute lookupMe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2UsersMeResponse> _callback) throws ApiException {
            return lookupMeAsync(userFields, expansions, tweetFields, _callback);
        }
    }

    /**
     * User lookup me
     * This endpoint returns information about the requesting User.
     * @return LookupMeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me">User lookup me Documentation</a>
     */
    public LookupMeRequestBuilder lookupMe() throws IllegalArgumentException {
        return new LookupMeRequestBuilder();
    }
    private okhttp3.Call muteUserByIdCall(String id, MuteUserRequest muteUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = muteUserRequest;

        // create path and map variables
        String localVarPath = "/2/users/{id}/muting"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call muteUserByIdValidateBeforeCall(String id, MuteUserRequest muteUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling muteUserById(Async)");
        }

        return muteUserByIdCall(id, muteUserRequest, _callback);

    }


    private ApiResponse<MuteUserMutationResponse> muteUserByIdWithHttpInfo(String id, MuteUserRequest muteUserRequest) throws ApiException {
        okhttp3.Call localVarCall = muteUserByIdValidateBeforeCall(id, muteUserRequest, null);
        Type localVarReturnType = new TypeToken<MuteUserMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call muteUserByIdAsync(String id, MuteUserRequest muteUserRequest, final ApiCallback<MuteUserMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = muteUserByIdValidateBeforeCall(id, muteUserRequest, _callback);
        Type localVarReturnType = new TypeToken<MuteUserMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MuteUserByIdRequestBuilder {
        private final String targetUserId;
        private final String id;

        private MuteUserByIdRequestBuilder(String targetUserId, String id) {
            this.targetUserId = targetUserId;
            this.id = id;
        }

        /**
         * Build call for muteUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MuteUserRequest muteUserRequest = buildBodyParams();
            return muteUserByIdCall(id, muteUserRequest, _callback);
        }

        private MuteUserRequest buildBodyParams() {
            MuteUserRequest muteUserRequest = new MuteUserRequest();
            muteUserRequest.targetUserId(this.targetUserId);
            return muteUserRequest;
        }

        /**
         * Execute muteUserById request
         * @return MuteUserMutationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public MuteUserMutationResponse execute() throws ApiException {
            MuteUserRequest muteUserRequest = buildBodyParams();
            ApiResponse<MuteUserMutationResponse> localVarResp = muteUserByIdWithHttpInfo(id, muteUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute muteUserById request with HTTP info returned
         * @return ApiResponse&lt;MuteUserMutationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MuteUserMutationResponse> executeWithHttpInfo() throws ApiException {
            MuteUserRequest muteUserRequest = buildBodyParams();
            return muteUserByIdWithHttpInfo(id, muteUserRequest);
        }

        /**
         * Execute muteUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MuteUserMutationResponse> _callback) throws ApiException {
            MuteUserRequest muteUserRequest = buildBodyParams();
            return muteUserByIdAsync(id, muteUserRequest, _callback);
        }
    }

    /**
     * Mute User by User ID.
     * Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
     * @param id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @return MuteUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting">Mute User by User ID. Documentation</a>
     */
    public MuteUserByIdRequestBuilder muteUserById(String targetUserId, String id) throws IllegalArgumentException {
        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new MuteUserByIdRequestBuilder(targetUserId, id);
    }
    private okhttp3.Call unblockUserByIdCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{source_user_id}/blocking/{target_user_id}"
            .replace("{" + "source_user_id" + "}", localVarApiClient.escapeString(sourceUserId.toString()))
            .replace("{" + "target_user_id" + "}", localVarApiClient.escapeString(targetUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unblockUserByIdValidateBeforeCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceUserId' is set
        if (sourceUserId == null) {
            throw new ApiException("Missing the required parameter 'sourceUserId' when calling unblockUserById(Async)");
        }

        // verify the required parameter 'targetUserId' is set
        if (targetUserId == null) {
            throw new ApiException("Missing the required parameter 'targetUserId' when calling unblockUserById(Async)");
        }

        return unblockUserByIdCall(sourceUserId, targetUserId, _callback);

    }


    private ApiResponse<BlockUserMutationResponse> unblockUserByIdWithHttpInfo(String sourceUserId, String targetUserId) throws ApiException {
        okhttp3.Call localVarCall = unblockUserByIdValidateBeforeCall(sourceUserId, targetUserId, null);
        Type localVarReturnType = new TypeToken<BlockUserMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unblockUserByIdAsync(String sourceUserId, String targetUserId, final ApiCallback<BlockUserMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unblockUserByIdValidateBeforeCall(sourceUserId, targetUserId, _callback);
        Type localVarReturnType = new TypeToken<BlockUserMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnblockUserByIdRequestBuilder {
        private final String sourceUserId;
        private final String targetUserId;

        private UnblockUserByIdRequestBuilder(String sourceUserId, String targetUserId) {
            this.sourceUserId = sourceUserId;
            this.targetUserId = targetUserId;
        }

        /**
         * Build call for unblockUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unblockUserByIdCall(sourceUserId, targetUserId, _callback);
        }


        /**
         * Execute unblockUserById request
         * @return BlockUserMutationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public BlockUserMutationResponse execute() throws ApiException {
            ApiResponse<BlockUserMutationResponse> localVarResp = unblockUserByIdWithHttpInfo(sourceUserId, targetUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unblockUserById request with HTTP info returned
         * @return ApiResponse&lt;BlockUserMutationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockUserMutationResponse> executeWithHttpInfo() throws ApiException {
            return unblockUserByIdWithHttpInfo(sourceUserId, targetUserId);
        }

        /**
         * Execute unblockUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockUserMutationResponse> _callback) throws ApiException {
            return unblockUserByIdAsync(sourceUserId, targetUserId, _callback);
        }
    }

    /**
     * Unblock User by User ID
     * Causes the source User to unblock the target User. The source User must match the User context authorizing the request
     * @param sourceUserId The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unblock. (required)
     * @return UnblockUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking">Unblock User by User ID Documentation</a>
     */
    public UnblockUserByIdRequestBuilder unblockUserById(String sourceUserId, String targetUserId) throws IllegalArgumentException {
        if (sourceUserId == null) throw new IllegalArgumentException("\"sourceUserId\" is required but got null");
            

        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        return new UnblockUserByIdRequestBuilder(sourceUserId, targetUserId);
    }
    private okhttp3.Call unfollowUserCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{source_user_id}/following/{target_user_id}"
            .replace("{" + "source_user_id" + "}", localVarApiClient.escapeString(sourceUserId.toString()))
            .replace("{" + "target_user_id" + "}", localVarApiClient.escapeString(targetUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowUserValidateBeforeCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceUserId' is set
        if (sourceUserId == null) {
            throw new ApiException("Missing the required parameter 'sourceUserId' when calling unfollowUser(Async)");
        }

        // verify the required parameter 'targetUserId' is set
        if (targetUserId == null) {
            throw new ApiException("Missing the required parameter 'targetUserId' when calling unfollowUser(Async)");
        }

        return unfollowUserCall(sourceUserId, targetUserId, _callback);

    }


    private ApiResponse<UsersFollowingDeleteResponse> unfollowUserWithHttpInfo(String sourceUserId, String targetUserId) throws ApiException {
        okhttp3.Call localVarCall = unfollowUserValidateBeforeCall(sourceUserId, targetUserId, null);
        Type localVarReturnType = new TypeToken<UsersFollowingDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unfollowUserAsync(String sourceUserId, String targetUserId, final ApiCallback<UsersFollowingDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowUserValidateBeforeCall(sourceUserId, targetUserId, _callback);
        Type localVarReturnType = new TypeToken<UsersFollowingDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnfollowUserRequestBuilder {
        private final String sourceUserId;
        private final String targetUserId;

        private UnfollowUserRequestBuilder(String sourceUserId, String targetUserId) {
            this.sourceUserId = sourceUserId;
            this.targetUserId = targetUserId;
        }

        /**
         * Build call for unfollowUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unfollowUserCall(sourceUserId, targetUserId, _callback);
        }


        /**
         * Execute unfollowUser request
         * @return UsersFollowingDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersFollowingDeleteResponse execute() throws ApiException {
            ApiResponse<UsersFollowingDeleteResponse> localVarResp = unfollowUserWithHttpInfo(sourceUserId, targetUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unfollowUser request with HTTP info returned
         * @return ApiResponse&lt;UsersFollowingDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersFollowingDeleteResponse> executeWithHttpInfo() throws ApiException {
            return unfollowUserWithHttpInfo(sourceUserId, targetUserId);
        }

        /**
         * Execute unfollowUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersFollowingDeleteResponse> _callback) throws ApiException {
            return unfollowUserAsync(sourceUserId, targetUserId, _callback);
        }
    }

    /**
     * Unfollow User
     * Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
     * @param sourceUserId The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unfollow. (required)
     * @return UnfollowUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following">Unfollow User Documentation</a>
     */
    public UnfollowUserRequestBuilder unfollowUser(String sourceUserId, String targetUserId) throws IllegalArgumentException {
        if (sourceUserId == null) throw new IllegalArgumentException("\"sourceUserId\" is required but got null");
            

        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        return new UnfollowUserRequestBuilder(sourceUserId, targetUserId);
    }
    private okhttp3.Call unmuteByUserIdCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/users/{source_user_id}/muting/{target_user_id}"
            .replace("{" + "source_user_id" + "}", localVarApiClient.escapeString(sourceUserId.toString()))
            .replace("{" + "target_user_id" + "}", localVarApiClient.escapeString(targetUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unmuteByUserIdValidateBeforeCall(String sourceUserId, String targetUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceUserId' is set
        if (sourceUserId == null) {
            throw new ApiException("Missing the required parameter 'sourceUserId' when calling unmuteByUserId(Async)");
        }

        // verify the required parameter 'targetUserId' is set
        if (targetUserId == null) {
            throw new ApiException("Missing the required parameter 'targetUserId' when calling unmuteByUserId(Async)");
        }

        return unmuteByUserIdCall(sourceUserId, targetUserId, _callback);

    }


    private ApiResponse<MuteUserMutationResponse> unmuteByUserIdWithHttpInfo(String sourceUserId, String targetUserId) throws ApiException {
        okhttp3.Call localVarCall = unmuteByUserIdValidateBeforeCall(sourceUserId, targetUserId, null);
        Type localVarReturnType = new TypeToken<MuteUserMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unmuteByUserIdAsync(String sourceUserId, String targetUserId, final ApiCallback<MuteUserMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unmuteByUserIdValidateBeforeCall(sourceUserId, targetUserId, _callback);
        Type localVarReturnType = new TypeToken<MuteUserMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnmuteByUserIdRequestBuilder {
        private final String sourceUserId;
        private final String targetUserId;

        private UnmuteByUserIdRequestBuilder(String sourceUserId, String targetUserId) {
            this.sourceUserId = sourceUserId;
            this.targetUserId = targetUserId;
        }

        /**
         * Build call for unmuteByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unmuteByUserIdCall(sourceUserId, targetUserId, _callback);
        }


        /**
         * Execute unmuteByUserId request
         * @return MuteUserMutationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public MuteUserMutationResponse execute() throws ApiException {
            ApiResponse<MuteUserMutationResponse> localVarResp = unmuteByUserIdWithHttpInfo(sourceUserId, targetUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unmuteByUserId request with HTTP info returned
         * @return ApiResponse&lt;MuteUserMutationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MuteUserMutationResponse> executeWithHttpInfo() throws ApiException {
            return unmuteByUserIdWithHttpInfo(sourceUserId, targetUserId);
        }

        /**
         * Execute unmuteByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MuteUserMutationResponse> _callback) throws ApiException {
            return unmuteByUserIdAsync(sourceUserId, targetUserId, _callback);
        }
    }

    /**
     * Unmute User by User ID
     * Causes the source User to unmute the target User. The source User must match the User context authorizing the request
     * @param sourceUserId The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unmute. (required)
     * @return UnmuteByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting">Unmute User by User ID Documentation</a>
     */
    public UnmuteByUserIdRequestBuilder unmuteByUserId(String sourceUserId, String targetUserId) throws IllegalArgumentException {
        if (sourceUserId == null) throw new IllegalArgumentException("\"sourceUserId\" is required but got null");
            

        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
            

        return new UnmuteByUserIdRequestBuilder(sourceUserId, targetUserId);
    }
}
