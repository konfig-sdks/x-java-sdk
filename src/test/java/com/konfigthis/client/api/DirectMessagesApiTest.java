/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateDmConversationRequest;
import com.konfigthis.client.model.CreateDmEventResponse;
import com.konfigthis.client.model.CreateTextMessageRequestAttachmentsInner;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2DmConversationsIdDmEventsResponse;
import com.konfigthis.client.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import com.konfigthis.client.model.Get2DmEventsResponse;
import com.konfigthis.client.model.Problem;
import java.util.Set;
import com.konfigthis.client.model.TACreateMessageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DirectMessagesApi
 */
@Disabled
public class DirectMessagesApiTest {

    private static DirectMessagesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DirectMessagesApi(apiClient);
    }

    /**
     * Create a new DM Conversation
     *
     * Creates a new DM Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDmConversationTest() throws ApiException {
        String conversationType = null;
        TACreateMessageRequest message = null;
        List<String> participantIds = null;
        CreateDmEventResponse response = api.createNewDmConversation(conversationType, message, participantIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Get DM Events for a DM Conversation
     *
     * Returns DM Events for a DM Conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDmEventsTest() throws ApiException {
        String participantId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
        Get2DmConversationsWithParticipantIdDmEventsResponse response = api.getDmEvents(participantId)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get DM Events for a DM Conversation
     *
     * Returns DM Events for a DM Conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDmEvents_0Test() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
        Get2DmConversationsIdDmEventsResponse response = api.getDmEvents_0(id)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get recent DM Events
     *
     * Returns recent DM Events across DM conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentDmEventsTest() throws ApiException {
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
        Get2DmEventsResponse response = api.getRecentDmEvents()
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a new message to a DM Conversation
     *
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendNewMessageToDmConversationTest() throws ApiException {
        String dmConversationId = null;
        List<CreateTextMessageRequestAttachmentsInner> attachments = null;
        String text = null;
        CreateDmEventResponse response = api.sendNewMessageToDmConversation(dmConversationId)
                .attachments(attachments)
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a new message to a user
     *
     * Creates a new message for a DM Conversation with a participant user by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendNewMessageToUserTest() throws ApiException {
        String participantId = null;
        List<CreateTextMessageRequestAttachmentsInner> attachments = null;
        String text = null;
        CreateDmEventResponse response = api.sendNewMessageToUser(participantId)
                .attachments(attachments)
                .text(text)
                .execute();
        // TODO: test validations
    }

}
