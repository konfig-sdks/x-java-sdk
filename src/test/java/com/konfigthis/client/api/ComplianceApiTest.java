/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateComplianceJobRequest;
import com.konfigthis.client.model.CreateComplianceJobResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Get2ComplianceJobsIdResponse;
import com.konfigthis.client.model.Get2ComplianceJobsResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Problem;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComplianceApi
 */
@Disabled
public class ComplianceApiTest {

    private static ComplianceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ComplianceApi(apiClient);
    }

    /**
     * Create compliance job
     *
     * Creates a compliance for the given job type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String type = null;
        String name = null;
        Boolean resumable = null;
        CreateComplianceJobResponse response = api.createJob(type)
                .name(name)
                .resumable(resumable)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Compliance Job
     *
     * Returns a single Compliance Job by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobByIdTest() throws ApiException {
        String id = null;
        Set<String> complianceJobFields = null;
        Get2ComplianceJobsIdResponse response = api.getJobById(id)
                .complianceJobFields(complianceJobFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List Compliance Jobs
     *
     * Returns recent Compliance Jobs for a given job type and optional job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        String type = null;
        String status = null;
        Set<String> complianceJobFields = null;
        Get2ComplianceJobsResponse response = api.listJobs(type)
                .status(status)
                .complianceJobFields(complianceJobFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Tweets Compliance stream
     *
     * Streams 100% of compliance data for Tweets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamDataTest() throws ApiException {
        Integer partition = null;
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Object response = api.streamData(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Tweets Label stream
     *
     * Streams 100% of labeling events applied to Tweets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamTweetsLabelEventsTest() throws ApiException {
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Object response = api.streamTweetsLabelEvents()
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Users Compliance stream
     *
     * Streams 100% of compliance data for Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamUsersDataTest() throws ApiException {
        Integer partition = null;
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Object response = api.streamUsersData(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }

}
