/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddOrDeleteRulesResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.FilteredStreamingTweetResponse;
import com.konfigthis.client.model.Get2ListsIdTweetsResponse;
import com.konfigthis.client.model.Get2SpacesIdBuyersResponse;
import com.konfigthis.client.model.Get2SpacesIdTweetsResponse;
import com.konfigthis.client.model.Get2TweetsCountsAllResponse;
import com.konfigthis.client.model.Get2TweetsCountsRecentResponse;
import com.konfigthis.client.model.Get2TweetsIdQuoteTweetsResponse;
import com.konfigthis.client.model.Get2TweetsIdResponse;
import com.konfigthis.client.model.Get2TweetsResponse;
import com.konfigthis.client.model.Get2TweetsSample10StreamResponse;
import com.konfigthis.client.model.Get2TweetsSearchAllResponse;
import com.konfigthis.client.model.Get2TweetsSearchRecentResponse;
import com.konfigthis.client.model.Get2UsersIdLikedTweetsResponse;
import com.konfigthis.client.model.Get2UsersIdMentionsResponse;
import com.konfigthis.client.model.Get2UsersIdTimelinesReverseChronologicalResponse;
import com.konfigthis.client.model.Get2UsersIdTweetsResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Problem;
import com.konfigthis.client.model.RulesLookupResponse;
import java.util.Set;
import com.konfigthis.client.model.StreamingTweetResponse;
import com.konfigthis.client.model.TweetCreateRequest;
import com.konfigthis.client.model.TweetCreateRequestGeo;
import com.konfigthis.client.model.TweetCreateRequestMedia;
import com.konfigthis.client.model.TweetCreateRequestPoll;
import com.konfigthis.client.model.TweetCreateRequestReply;
import com.konfigthis.client.model.TweetCreateResponse;
import com.konfigthis.client.model.TweetDeleteResponse;
import com.konfigthis.client.model.TweetHideRequest;
import com.konfigthis.client.model.TweetHideResponse;
import com.konfigthis.client.model.UsersLikesCreateRequest;
import com.konfigthis.client.model.UsersLikesCreateResponse;
import com.konfigthis.client.model.UsersLikesDeleteResponse;
import com.konfigthis.client.model.UsersRetweetsCreateRequest;
import com.konfigthis.client.model.UsersRetweetsCreateResponse;
import com.konfigthis.client.model.UsersRetweetsDeleteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TweetsApi
 */
@Disabled
public class TweetsApiTest {

    private static TweetsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TweetsApi(apiClient);
    }

    /**
     * Add/Delete rules
     *
     * Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrDeleteRulesTest() throws ApiException {
        Boolean dryRun = null;
        AddOrDeleteRulesResponse response = api.addOrDeleteRules()
                .dryRun(dryRun)
                .execute();
        // TODO: test validations
    }

    /**
     * Creation of a Tweet
     *
     * Causes the User to create a Tweet under the authorized account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTweetTest() throws ApiException {
        String cardUri = null;
        String directMessageDeepLink = null;
        Boolean forSuperFollowersOnly = null;
        TweetCreateRequestGeo geo = null;
        TweetCreateRequestMedia media = null;
        Boolean nullcast = null;
        TweetCreateRequestPoll poll = null;
        String quoteTweetId = null;
        TweetCreateRequestReply reply = null;
        String replySettings = null;
        String text = null;
        TweetCreateResponse response = api.createTweet()
                .cardUri(cardUri)
                .directMessageDeepLink(directMessageDeepLink)
                .forSuperFollowersOnly(forSuperFollowersOnly)
                .geo(geo)
                .media(media)
                .nullcast(nullcast)
                .poll(poll)
                .quoteTweetId(quoteTweetId)
                .reply(reply)
                .replySettings(replySettings)
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * Tweet delete by Tweet ID
     *
     * Delete specified Tweet (in the path) by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String id = null;
        TweetDeleteResponse response = api.deleteById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * Retrieves the list of Users who purchased a ticket to the given space
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuyersListTest() throws ApiException {
        String id = null;
        String paginationToken = null;
        Integer maxResults = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2SpacesIdBuyersResponse response = api.getBuyersList(id)
                .paginationToken(paginationToken)
                .maxResults(maxResults)
                .userFields(userFields)
                .expansions(expansions)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Filtered stream
     *
     * Streams Tweets matching the stream&#39;s active rule set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilteredStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        FilteredStreamingTweetResponse response = api.getFilteredStream()
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Firehose stream
     *
     * Streams 100% of public Tweets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirehoseStreamTest() throws ApiException {
        Integer partition = null;
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        StreamingTweetResponse response = api.getFirehoseStream(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns Tweet objects liked by the provided User ID
     *
     * Returns a list of Tweets liked by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLikedTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2UsersIdLikedTweetsResponse response = api.getLikedTweets(id)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * User mention timeline by User ID
     *
     * Returns Tweet objects that mention username associated to the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMentionsByIdTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2UsersIdMentionsResponse response = api.getMentionsById(id)
                .sinceId(sinceId)
                .untilId(untilId)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Tweets that quote a Tweet.
     *
     * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsIdQuoteTweetsResponse response = api.getQuoteTweets(id)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .exclude(exclude)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Recent search counts
     *
     * Returns Tweet Counts from the last 7 days that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentTweetCountsTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        String paginationToken = null;
        String granularity = null;
        Set<String> searchCountFields = null;
        Get2TweetsCountsRecentResponse response = api.getRecentTweetCounts(query)
                .startTime(startTime)
                .endTime(endTime)
                .sinceId(sinceId)
                .untilId(untilId)
                .nextToken(nextToken)
                .paginationToken(paginationToken)
                .granularity(granularity)
                .searchCountFields(searchCountFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Recent search
     *
     * Returns Tweets from the last 7 days that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentTweetsTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        String paginationToken = null;
        String sortOrder = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsSearchRecentResponse response = api.getRecentTweets(query)
                .startTime(startTime)
                .endTime(endTime)
                .sinceId(sinceId)
                .untilId(untilId)
                .maxResults(maxResults)
                .nextToken(nextToken)
                .paginationToken(paginationToken)
                .sortOrder(sortOrder)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Full archive search counts
     *
     * Returns Tweet Counts that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTweetCountsTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        String paginationToken = null;
        String granularity = null;
        Set<String> searchCountFields = null;
        Get2TweetsCountsAllResponse response = api.getTweetCounts(query)
                .startTime(startTime)
                .endTime(endTime)
                .sinceId(sinceId)
                .untilId(untilId)
                .nextToken(nextToken)
                .paginationToken(paginationToken)
                .granularity(granularity)
                .searchCountFields(searchCountFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Tweets from a Space.
     *
     * Retrieves Tweets shared in the specified Space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2SpacesIdTweetsResponse response = api.getTweets(id)
                .maxResults(maxResults)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * User home timeline by User ID
     *
     * Returns Tweet objects that appears in the provided User ID&#39;s home timeline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserHomeTimelineTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2UsersIdTimelinesReverseChronologicalResponse response = api.getUserHomeTimeline(id)
                .sinceId(sinceId)
                .untilId(untilId)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .exclude(exclude)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Hide replies
     *
     * Hides or unhides a reply to an owned conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideReplyTest() throws ApiException {
        Boolean hidden = null;
        String tweetId = null;
        TweetHideResponse response = api.hideReply(hidden, tweetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Causes the User (in the path) to like the specified Tweet
     *
     * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likeTweetTest() throws ApiException {
        String tweetId = null;
        String id = null;
        UsersLikesCreateResponse response = api.likeTweet(tweetId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Tweets timeline by List ID.
     *
     * Returns a list of Tweets associated with the provided List ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByListIdTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2ListsIdTweetsResponse response = api.listByListId(id)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * User Tweets timeline by User ID
     *
     * Returns a list of Tweets authored by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByUserIdTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2UsersIdTweetsResponse response = api.listByUserId(id)
                .sinceId(sinceId)
                .untilId(untilId)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .exclude(exclude)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Tweet lookup by Tweet ID
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookupByIdTest() throws ApiException {
        String id = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsIdResponse response = api.lookupById(id)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Tweet lookup by Tweet IDs
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookupByTweetIdsTest() throws ApiException {
        List<String> ids = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsResponse response = api.lookupByTweetIds(ids)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Causes the User (in the path) to retweet the specified Tweet.
     *
     * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retweetTweetByIdTest() throws ApiException {
        String tweetId = null;
        String id = null;
        UsersRetweetsCreateResponse response = api.retweetTweetById(tweetId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Full-archive search
     *
     * Returns Tweets that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAllTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        String paginationToken = null;
        String sortOrder = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsSearchAllResponse response = api.searchAll(query)
                .startTime(startTime)
                .endTime(endTime)
                .sinceId(sinceId)
                .untilId(untilId)
                .maxResults(maxResults)
                .nextToken(nextToken)
                .paginationToken(paginationToken)
                .sortOrder(sortOrder)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Rules lookup
     *
     * Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchStreamRulesTest() throws ApiException {
        List<String> ids = null;
        Integer maxResults = null;
        String paginationToken = null;
        RulesLookupResponse response = api.searchStreamRules()
                .ids(ids)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Sample stream
     *
     * Streams a deterministic 1% of public Tweets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSampleTest() throws ApiException {
        Integer backfillMinutes = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        StreamingTweetResponse response = api.streamSample()
                .backfillMinutes(backfillMinutes)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Sample 10% stream
     *
     * Streams a deterministic 10% of public Tweets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSample10Test() throws ApiException {
        Integer partition = null;
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
        Get2TweetsSample10StreamResponse response = api.streamSample10(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .tweetFields(tweetFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .pollFields(pollFields)
                .userFields(userFields)
                .placeFields(placeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Causes the User (in the path) to unlike the specified Tweet
     *
     * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlikeTweetByIdTest() throws ApiException {
        String id = null;
        String tweetId = null;
        UsersLikesDeleteResponse response = api.unlikeTweetById(id, tweetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Causes the User (in the path) to unretweet the specified Tweet
     *
     * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unretweetByIdTest() throws ApiException {
        String id = null;
        String sourceTweetId = null;
        UsersRetweetsDeleteResponse response = api.unretweetById(id, sourceTweetId)
                .execute();
        // TODO: test validations
    }

}
